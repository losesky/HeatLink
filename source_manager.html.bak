<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HeatLink 新闻源管理器</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
    <!-- CodeMirror CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/monokai.min.css">
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: #f8f9fa;
            padding-bottom: 50px;
        }
        .navbar {
            margin-bottom: 20px;
        }
        .card {
            margin-bottom: 20px;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        .loading {
            display: inline-block;
            width: 25px;
            height: 25px;
            border: 3px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top-color: #0d6efd;
            animation: spin 1s ease-in-out infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        .CodeMirror {
            height: 300px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        #globalLoader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            z-index: 1051;
        }
        .source-list-item {
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .source-list-item:hover {
            background-color: #f8f9fa;
        }
        .source-list-item.active {
            background-color: #e9ecef;
        }
        .nav-tabs {
            margin-bottom: 15px;
        }
        .alert {
            margin-bottom: 10px;
        }
        /* HTML Visualization Styles */
        .html-visualization-container {
            font-family: monospace;
            overflow-x: auto;
            background-color: #f8f9fa;
            border-radius: 0;
            padding: 0;
        }
        #htmlVisualization {
            white-space: pre-wrap;
            font-size: 14px;
            line-height: 1.5;
        }
        .tag-name {
            color: #0000ff;
            font-weight: bold;
        }
        .attribute-name {
            color: #008000;
        }
        .attribute-value {
            color: #dd0000;
        }
        .html-comment {
            color: #808080;
            font-style: italic;
        }
        .text-content {
            color: #000000;
        }
        .nested-level {
            border-left: 1px dotted #ccc;
            margin-left: 20px;
            padding-left: 5px;
        }
        .hover-highlight:hover {
            background-color: rgba(0, 123, 255, 0.1);
        }
    </style>
</head>
<body>
    <!-- Global Loader -->
    <div id="globalLoader">
        <div class="loading"></div>
        <p class="mt-3" id="loaderMessage">加载中...</p>
    </div>

    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="#">HeatLink 新闻源管理器</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="#" id="navCreate">创建新源</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="navManage">管理源</a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/static/docs_index.html">
                            <i class="bi bi-house-door"></i> 返回文档中心
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container">
        <!-- Main content area -->
        <div id="createSourceSection">
            <h2 class="mb-3">创建新闻源适配器</h2>
            <div class="alert alert-info">
                <p><strong>提示：</strong>这个工具将基于提供的URL和代码样本生成自定义新闻源适配器。</p>
            </div>
            
            <!-- Create Source Form -->
            <div class="card">
                <div class="card-body">
                    <form id="createSourceForm">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="sourceId" class="form-label">源ID <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="sourceId" required 
                                       placeholder="例如：news-website">
                                <div class="form-text">此源的唯一标识符，使用小写字母和连字符。会自动添加"custom-"前缀</div>
                            </div>
                            <div class="col-md-6">
                                <label for="sourceName" class="form-label">源名称 <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="sourceName" required 
                                       placeholder="例如：自定义新闻门户">
                                <div class="form-text">此源的显示名称</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="sourceUrl" class="form-label">源URL <span class="text-danger">*</span></label>
                                <input type="url" class="form-control" id="sourceUrl" required 
                                       placeholder="https://example.com/news">
                                <div class="form-text">要抓取的新闻页面URL</div>
                            </div>
                            <div class="col-md-6">
                                <label for="sourceCategory" class="form-label">类别</label>
                                <select class="form-select" id="sourceCategory">
                                    <option value="news">新闻</option>
                                    <option value="technology">科技</option>
                                    <option value="finance">财经</option>
                                    <option value="sports">体育</option>
                                    <option value="entertainment">娱乐</option>
                                    <option value="science">科学</option>
                                    <option value="health">健康</option>
                                    <option value="politics">政治</option>
                                    <option value="business">商业</option>
                                    <option value="other">其他</option>
                                </select>
                                <div class="form-text">新闻源的类别</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="sourceCountry" class="form-label">国家</label>
                                <input type="text" class="form-control" id="sourceCountry" 
                                       placeholder="例如：US, CN, JP" value="CN">
                                <div class="form-text">国家代码 (ISO 3166-1 alpha-2)</div>
                            </div>
                            <div class="col-md-6">
                                <label for="sourceLanguage" class="form-label">语言</label>
                                <input type="text" class="form-control" id="sourceLanguage" 
                                       placeholder="例如：en, zh-CN, ja" value="zh-CN">
                                <div class="form-text">语言代码 (ISO 639-1)</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="updateInterval" class="form-label">更新间隔 (秒)</label>
                                <input type="number" class="form-control" id="updateInterval" 
                                       value="1800" min="300" max="86400">
                                <div class="form-text">多久获取一次新数据 (最小: 5分钟)</div>
                            </div>
                            <div class="col-md-6">
                                <label for="cacheTtl" class="form-label">缓存TTL (秒)</label>
                                <input type="number" class="form-control" id="cacheTtl" 
                                       value="900" min="60" max="43200">
                                <div class="form-text">数据缓存多长时间 (最小: 1分钟)</div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="htmlExample" class="form-label">HTML示例 <span class="text-danger">*</span></label>
                            <textarea id="htmlExample" class="form-control" style="height: 300px; font-family: monospace;" placeholder="粘贴包含新闻条目的新闻页面HTML示例"></textarea>
                            <div class="form-text">粘贴包含新闻条目的新闻页面HTML示例</div>
                            <div class="mt-2">
                                <button type="button" id="formatHtmlBtn" class="btn btn-secondary me-2">
                                    <i class="bi bi-code"></i> 格式化HTML
                                </button>
                                <button type="button" id="formatAndDisplayBtn" class="btn btn-secondary me-2">
                                    <i class="bi bi-eye"></i> 格式化并显示
                                </button>
                                <button type="button" id="analyzeHtmlBtn" class="btn btn-info">
                                    <i class="bi bi-magic"></i> 分析HTML结构并推荐选择器
                                </button>
                                <button type="button" id="copyVisualizedHtmlBtn" class="btn btn-outline-secondary ms-2" style="display:none">
                                    <i class="bi bi-clipboard"></i> 复制格式化HTML
                                </button>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="itemSelector" class="form-label">条目选择器 <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="itemSelector" required 
                                       placeholder="例如：div.news-item, article.post">
                                <div class="form-text">用于在HTML中找到新闻条目的CSS选择器</div>
                            </div>
                            <div class="col-md-6">
                                <label for="titleSelector" class="form-label">标题选择器 <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="titleSelector" required 
                                       placeholder="例如：h3.title, .headline">
                                <div class="form-text">用于在每个条目中找到标题的CSS选择器</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="linkSelector" class="form-label">链接选择器</label>
                                <input type="text" class="form-control" id="linkSelector" 
                                       placeholder="例如：a, .link">
                                <div class="form-text">用于在每个条目中找到链接的CSS选择器</div>
                            </div>
                            <div class="col-md-6">
                                <label for="dateSelector" class="form-label">日期选择器</label>
                                <input type="text" class="form-control" id="dateSelector" 
                                       placeholder="例如：.date, time">
                                <div class="form-text">用于在每个条目中找到日期的CSS选择器</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="summarySelector" class="form-label">摘要选择器</label>
                                <input type="text" class="form-control" id="summarySelector" 
                                       placeholder="例如：.summary, p.excerpt">
                                <div class="form-text">用于在每个条目中找到摘要的CSS选择器</div>
                            </div>
                            <div class="col-md-6">
                                <label for="contentSelector" class="form-label">内容选择器</label>
                                <input type="text" class="form-control" id="contentSelector" 
                                       placeholder="例如：.content, .article-body">
                                <div class="form-text">用于在每个条目中找到完整内容的CSS选择器（如果有）</div>
                            </div>
                        </div>
                        
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="useSelenium">
                            <label class="form-check-label" for="useSelenium">使用Selenium处理JavaScript页面</label>
                            <div class="form-text">如果页面需要JavaScript才能加载内容，请启用此选项</div>
                        </div>
                        
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="autoRegister" checked>
                            <label class="form-check-label" for="autoRegister">自动注册源</label>
                            <div class="form-text">在数据库中注册此源并使其可用</div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <button type="button" id="previewSourceBtn" class="btn btn-secondary w-100">预览源代码</button>
                            </div>
                            <div class="col-md-6">
                                <button type="submit" id="createSourceBtn" class="btn btn-primary w-100">创建源适配器</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            
            <!-- Preview Modal -->
            <div class="modal fade" id="previewModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">源适配器预览</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div id="previewEditor"></div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                            <button type="button" class="btn btn-primary" id="copyPreviewBtn">复制代码</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Result Modal -->
            <div class="modal fade" id="resultModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="resultModalTitle">源已创建</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body" id="resultModalBody">
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                            <button type="button" class="btn btn-primary" id="testNewSourceBtn">测试源</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="manageSourcesSection" style="display: none;">
            <h2 class="mb-3">管理新闻源</h2>
            
            <!-- Source Management Content -->
            <div class="row">
                <div class="col-md-4">
                    <div class="card mb-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">源列表</h5>
                            <button class="btn btn-sm btn-outline-primary" id="refreshSourcesBtn">
                                <i class="bi bi-arrow-clockwise"></i>
                            </button>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <input type="text" class="form-control" id="sourceSearchInput" placeholder="搜索源...">
                            </div>
                            <div class="list-group" id="sourceListContainer">
                                <div class="text-center py-3">
                                    <div class="loading"></div>
                                    <p class="mt-2">加载源中...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">操作</h5>
                        </div>
                        <div class="card-body">
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-primary" id="testSelectedSourceBtn" disabled>
                                    <i class="bi bi-play-fill"></i> 测试源
                                </button>
                                <button class="btn btn-outline-success" id="activateSourceBtn" disabled>
                                    <i class="bi bi-check-circle"></i> 激活
                                </button>
                                <button class="btn btn-outline-warning" id="deactivateSourceBtn" disabled>
                                    <i class="bi bi-pause-circle"></i> 停用
                                </button>
                                <button class="btn btn-outline-danger" id="deleteSourceBtn" disabled>
                                    <i class="bi bi-trash"></i> 删除
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-header">
                            <ul class="nav nav-tabs card-header-tabs" id="sourceDetailTabs">
                                <li class="nav-item">
                                    <a class="nav-link active" id="detailsTab" data-bs-toggle="tab" href="#details">详情</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="statsTab" data-bs-toggle="tab" href="#stats">统计</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="configTab" data-bs-toggle="tab" href="#config">配置</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="testResultTab" data-bs-toggle="tab" href="#testResult">测试结果</a>
                                </li>
                            </ul>
                        </div>
                        <div class="card-body">
                            <div class="tab-content">
                                <div class="tab-pane fade show active" id="details">
                                    <div id="sourceDetailsContainer">
                                        <div class="alert alert-info">
                                            <p>从列表中选择一个源以查看其详情。</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-pane fade" id="stats">
                                    <div id="sourceStatsContainer">
                                        <div class="alert alert-info">
                                            <p>从列表中选择一个源以查看其统计信息。</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-pane fade" id="config">
                                    <div id="sourceConfigContainer">
                                        <div class="alert alert-info">
                                            <p>从列表中选择一个源以查看和编辑其配置。</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-pane fade" id="testResult">
                                    <div id="sourceTestResultContainer">
                                        <div class="alert alert-info">
                                            <p>点击"测试源"来运行测试并查看结果。</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Edit Source Modal -->
            <div class="modal fade" id="editSourceModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">编辑源</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="editSourceForm">
                                <input type="hidden" id="editSourceId">
                                
                                <div class="mb-3">
                                    <label for="editSourceName" class="form-label">源名称</label>
                                    <input type="text" class="form-control" id="editSourceName" required>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="editSourceUrl" class="form-label">源URL</label>
                                    <input type="url" class="form-control" id="editSourceUrl">
                                </div>
                                
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="editSourceCategory" class="form-label">类别</label>
                                        <select class="form-select" id="editSourceCategory">
                                            <option value="news">新闻</option>
                                            <option value="technology">科技</option>
                                            <option value="finance">财经</option>
                                            <option value="sports">体育</option>
                                            <option value="entertainment">娱乐</option>
                                            <option value="science">科学</option>
                                            <option value="health">健康</option>
                                            <option value="politics">政治</option>
                                            <option value="business">商业</option>
                                            <option value="other">其他</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="editSourceStatus" class="form-label">状态</label>
                                        <select class="form-select" id="editSourceStatus">
                                            <option value="active">激活</option>
                                            <option value="inactive">未激活</option>
                                            <option value="error">错误</option>
                                            <option value="warning">警告</option>
                                        </select>
                                    </div>
                                </div>
                                
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="editUpdateInterval" class="form-label">更新间隔 (秒)</label>
                                        <input type="number" class="form-control" id="editUpdateInterval" min="300" max="86400">
                                    </div>
                                    <div class="col-md-6">
                                        <label for="editCacheTtl" class="form-label">缓存TTL (秒)</label>
                                        <input type="number" class="form-control" id="editCacheTtl" min="60" max="43200">
                                    </div>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="editSourceConfig" class="form-label">源配置 (JSON)</label>
                                    <div id="configEditor"></div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                            <button type="button" class="btn btn-primary" id="saveSourceBtn">保存更改</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Delete Confirmation Modal -->
            <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">确认删除</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>您确定要删除源 <strong id="deleteSourceName"></strong> 吗？</p>
                            <p class="text-danger">此操作无法撤消。</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                            <button type="button" class="btn btn-danger" id="confirmDeleteBtn">删除</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- HTML Display Modal -->
    <div class="modal fade" id="htmlDisplayModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">HTML结构可视化</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-0">
                    <div class="html-visualization-container">
                        <div id="htmlVisualization" class="p-3"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                    <button type="button" class="btn btn-primary" id="copyVisualizedHtmlBtn">复制格式化HTML</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- CodeMirror JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/htmlmixed/htmlmixed.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/xml/xml.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/css/css.min.js"></script>

    <!-- Main Script -->
    <script>
        // Global variables
        const API_BASE_URL = '/api';
        let htmlEditor;
        let previewEditor;
        let configEditor;
        let selectedSource = null;
        // 调试模式开关，设置为true时会显示更多的调试信息
        const DEBUG_MODE = true;
        
        // 调试日志函数
        function debugLog(...args) {
            if (DEBUG_MODE) {
                console.log('[DEBUG]', ...args);
            }
        }
        
        // Basic navigation functionality
        document.addEventListener('DOMContentLoaded', function() {
            const navCreate = document.getElementById('navCreate');
            const navManage = document.getElementById('navManage');
            const createSection = document.getElementById('createSourceSection');
            const manageSection = document.getElementById('manageSourcesSection');
            
            // Initialize editors
            htmlEditor = CodeMirror(document.getElementById('htmlEditor'), {
                mode: 'htmlmixed',
                theme: 'monokai',
                lineNumbers: true
            });
            
            // 添加HTML编辑器变化监听
            htmlEditor.on('change', function() {
                // 如果HTML内容变化且长度超过一定阈值，启用分析按钮和格式化按钮
                const htmlContent = htmlEditor.getValue();
                const contentLength = htmlContent.length;
                document.getElementById('analyzeHtmlBtn').disabled = contentLength < 100;
                document.getElementById('formatHtmlBtn').disabled = contentLength < 10;
            });
            
            // 添加格式化HTML按钮事件
            document.getElementById('formatHtmlBtn').addEventListener('click', function() {
                formatHtml();
                // Show the copy button after formatting
                document.getElementById('copyVisualizedHtmlBtn').style.display = 'inline-block';
            });
            
            // 添加一个API健康检查按钮
            const headerNav = document.querySelector('.navbar-nav');
            if (headerNav) {
                const apiCheckLi = document.createElement('li');
                apiCheckLi.className = 'nav-item';
                apiCheckLi.innerHTML = `
                    <a class="nav-link" href="#" id="apiHealthCheck">
                        <i class="bi bi-activity"></i> API检查
                    </a>
                `;
                headerNav.appendChild(apiCheckLi);
                
                document.getElementById('apiHealthCheck').addEventListener('click', function(e) {
                    e.preventDefault();
                    checkApiHealth();
                });
            }
            
            // 添加格式化并显示按钮事件
            document.getElementById('formatAndDisplayBtn').addEventListener('click', function() {
                formatAndDisplayHtml();
                // Show the copy button after formatting and displaying
                document.getElementById('copyVisualizedHtmlBtn').style.display = 'inline-block';
            });
            
            // 添加分析HTML按钮事件
            document.getElementById('analyzeHtmlBtn').addEventListener('click', function() {
                analyzeHtml();
            });
            
            // 添加复制可视化HTML按钮事件
            document.getElementById('copyVisualizedHtmlBtn').addEventListener('click', function() {
                const htmlContent = htmlEditor.getValue();
                
                // 复制到剪贴板
                navigator.clipboard.writeText(htmlContent).then(function() {
                    showToast('成功', '已复制格式化后的HTML到剪贴板', 'success');
                }).catch(function(err) {
                    console.error('无法复制文本: ', err);
                    showToast('错误', '复制到剪贴板失败，请手动复制', 'danger');
                });
            });
            
            previewEditor = CodeMirror(document.getElementById('previewEditor'), {
                mode: 'python',
                theme: 'monokai',
                lineNumbers: true,
                readOnly: true
            });
            
            configEditor = CodeMirror(document.getElementById('configEditor'), {
                mode: { name: 'javascript', json: true },
                theme: 'monokai',
                lineNumbers: true
            });
            
            // Navigation
            navCreate.addEventListener('click', (e) => {
                e.preventDefault();
                createSection.style.display = 'block';
                manageSection.style.display = 'none';
                navCreate.classList.add('active');
                navManage.classList.remove('active');
            });
            
            navManage.addEventListener('click', (e) => {
                e.preventDefault();
                createSection.style.display = 'none';
                manageSection.style.display = 'block';
                navCreate.classList.remove('active');
                navManage.classList.add('active');
                
                // Load sources
                loadSources();
            });
            
            // Set up form handlers
            document.getElementById('previewSourceBtn').addEventListener('click', function() {
                const sourceCode = generateSourceCode();
                previewEditor.setValue(sourceCode);
                new bootstrap.Modal(document.getElementById('previewModal')).show();
            });
            
            document.getElementById('createSourceForm').addEventListener('submit', function(e) {
                e.preventDefault();
                createSource();
            });
            
            // Set up action buttons in management section
            document.getElementById('refreshSourcesBtn').addEventListener('click', loadSources);
            
            document.getElementById('testSelectedSourceBtn').addEventListener('click', function() {
                if (selectedSource) {
                    testSource(selectedSource);
                    
                    // 切换到测试结果选项卡
                    const testResultTab = document.querySelector('#sourceDetailTabs a[href="#testResult"]');
                    const tabInstance = new bootstrap.Tab(testResultTab);
                    tabInstance.show();
                }
            });
            
            document.getElementById('activateSourceBtn').addEventListener('click', function() {
                if (selectedSource) {
                    showLoader(`激活源中: ${selectedSource}...`);
                    
                    fetch(`/api/sources/${selectedSource}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + (localStorage.getItem('auth_token') || ''),
                            'X-API-Key': localStorage.getItem('api_key') || ''
                        },
                        body: JSON.stringify({
                            status: 'active'
                        }),
                        credentials: 'include' // 包含cookies，这对于会话认证很重要
                    })
                    .then(response => {
                        if (!response.ok) {
                            // 详细记录错误
                            console.error('激活源失败，状态码:', response.status, response.statusText);
                            return response.text().then(text => {
                                let errorDetail = '激活源失败';
                                try {
                                    const errorJson = JSON.parse(text);
                                    errorDetail = errorJson.detail || `API错误: ${response.status} ${response.statusText}`;
                                    console.error('API错误详情:', errorJson);
                                } catch (e) {
                                    // 如果不是JSON，直接使用文本
                                    errorDetail = `API错误: ${response.status} ${response.statusText}. ${text}`;
                                    console.error('API响应内容:', text);
                                }
                                throw new Error(errorDetail);
                            });
                        }
                        return response.json();
                    })
                    .then(result => {
                        hideLoader();
                        
                        // 显示成功提示
                        const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                        document.getElementById('toastMessage').textContent = `源 "${result.name}" 已成功激活！`;
                        toast.show();
                        
                        // 更新源列表以反映状态变化
                        loadSources();
                        
                        // Show success message
                        document.getElementById('resultModalTitle').textContent = '源已激活';
                        document.getElementById('resultModalBody').innerHTML = `
                            <div class="alert alert-success">
                                <p><strong>源 "${result.name}" 已成功激活！</strong></p>
                                <p>源现在处于活动状态，将用于新闻聚合。</p>
                            </div>
                            <p>您可以在"管理源"部分管理此源。</p>
                        `;
                        
                        // 显示模态框
                        new bootstrap.Modal(document.getElementById('resultModal')).show();
                    })
                    .catch(error => {
                        hideLoader();
                        
                        console.error('激活源时出错:', error);
                        
                        // 检查是否是认证错误
                        if (error.message.includes('Not authenticated') || 
                            error.message.includes('401') || 
                            error.message.includes('auth') || 
                            error.message.includes('认证')) {
                            
                            // 处理认证错误
                            handleAuthError(error, () => {
                                // 认证成功后重新尝试激活
                                activateSource(selectedSource);
                            });
                            return;
                        }
                        
                        // 使用Toast显示错误
                        const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                        document.getElementById('toastMessage').textContent = `激活源失败: ${error.message}`;
                        document.getElementById('notificationToast').classList.add('bg-danger', 'text-white');
                        toast.show();
                        
                        // 5秒后恢复原来的样式
                        setTimeout(() => {
                            document.getElementById('notificationToast').classList.remove('bg-danger', 'text-white');
                        }, 5000);
                        
                        // Show error message
                        document.getElementById('resultModalTitle').textContent = '错误';
                        document.getElementById('resultModalBody').innerHTML = `
                            <div class="alert alert-danger">
                                <p><strong>激活源失败</strong></p>
                                <p>${error.message}</p>
                            </div>
                        `;
                        
                        // 显示模态框
                        new bootstrap.Modal(document.getElementById('resultModal')).show();
                    });
                }
            });
            
            document.getElementById('deactivateSourceBtn').addEventListener('click', function() {
                if (selectedSource) {
                    showLoader(`停用源中: ${selectedSource}...`);
                    
                    fetch(`/api/sources/${selectedSource}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            status: 'inactive'
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => {
                                throw new Error(err.detail || '停用源失败');
                            });
                        }
                        return response.json();
                    })
                    .then(result => {
                        hideLoader();
                        
                        // Reload sources
                        loadSources();
                        
                        // Reload source details
                        loadSourceDetails(selectedSource);
                        
                        // Show notification
                        alert(`源 "${result.name}" 已成功停用！`);
                    })
                    .catch(error => {
                        hideLoader();
                        
                        alert('停用源失败: ' + error.message);
                    });
                }
            });
            
            document.getElementById('deleteSourceBtn').addEventListener('click', function() {
                if (selectedSource) {
                    // Confirm deletion
                    fetch(`/api/sources/${selectedSource}`)
                    .then(response => response.json())
                    .then(source => {
                        document.getElementById('deleteSourceName').textContent = source.name;
                        new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show();
                        
                        // Set up confirm button
                        document.getElementById('confirmDeleteBtn').onclick = function() {
                            deleteSource(selectedSource);
                            bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();
                        };
                    })
                    .catch(error => {
                        console.error('Error loading source details:', error);
                        alert('Failed to load source details: ' + error.message);
                    });
                }
            });
        });
        
        // Helper functions
        function showLoader(message = 'Loading...') {
            document.getElementById('loaderMessage').textContent = message;
            document.getElementById('globalLoader').style.display = 'flex';
        }
        
        function hideLoader() {
            document.getElementById('globalLoader').style.display = 'none';
            
            // 也清除其他可能的遮罩层
            document.querySelectorAll('.loading-overlay, .overlay').forEach(overlay => {
                overlay.style.display = 'none';
            });
            
            // 确保body样式正常
            document.body.style.overflow = '';
            document.body.style.position = '';
        }
        
        function getFormData() {
            return {
                id: document.getElementById('sourceId').value,
                name: document.getElementById('sourceName').value,
                url: document.getElementById('sourceUrl').value,
                category: document.getElementById('sourceCategory').value,
                country: document.getElementById('sourceCountry').value,
                language: document.getElementById('sourceLanguage').value,
                update_interval: parseInt(document.getElementById('updateInterval').value),
                cache_ttl: parseInt(document.getElementById('cacheTtl').value),
                use_selenium: document.getElementById('useSelenium').checked,
                selectors: {
                    item: document.getElementById('itemSelector').value,
                    title: document.getElementById('titleSelector').value,
                    link: document.getElementById('linkSelector').value || '',
                    date: document.getElementById('dateSelector').value || '',
                    summary: document.getElementById('summarySelector').value || '',
                    content: document.getElementById('contentSelector').value || ''
                },
                html_example: htmlEditor.getValue()
            };
        }
        
        function generateSourceCode() {
            const data = getFormData();
            
            // Generate simple Python source code preview
            return `# Auto-generated source adapter for ${data.name}
import logging
from bs4 import BeautifulSoup
from worker.sources.web import WebNewsSource
from worker.sources.base import NewsItemModel

logger = logging.getLogger(__name__)

class ${data.id.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join('')}Source(WebNewsSource):
    """
    ${data.name} adapter
    Fetches news from ${data.url}
    """
    
    def __init__(self, source_id="${data.id}", name="${data.name}", url="${data.url}"):
        super().__init__(
            source_id=source_id,
            name=name,
            url=url,
            update_interval=${data.update_interval},
            cache_ttl=${data.cache_ttl},
            category="${data.category}",
            country="${data.country}",
            language="${data.language}"
        )
    
    async def parse_response(self, html):
        # Parse HTML using selectors:
        # Item: ${data.selectors.item}
        # Title: ${data.selectors.title}
        # Link: ${data.selectors.link} 
        # Date: ${data.selectors.date}
        # Summary: ${data.selectors.summary}
        # Content: ${data.selectors.content}
        pass
`;
        }
        
        function createSource() {
            showLoader('创建源中...');
            
            const data = getFormData();
            
            // 自动为源ID添加custom-前缀，如果尚未添加
            if (!data.id.startsWith('custom-')) {
                data.id = 'custom-' + data.id;
                debugLog('已自动为源ID添加custom-前缀:', data.id);
            }
            
            // Call the API to create the source
            fetch('/api/source-test/create-custom-source', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.detail || '创建源失败');
                    });
                }
                return response.json();
            })
            .then(result => {
                hideLoader();
                
                // Show success message
                document.getElementById('resultModalTitle').textContent = '源已创建';
                document.getElementById('resultModalBody').innerHTML = `
                    <div class="alert alert-success">
                        <p><strong>源 "${result.source.name}" 创建成功！</strong></p>
                        <p><strong>ID:</strong> <span class="badge bg-primary">${result.source.id}</span></p>
                        <p><strong>状态:</strong> <span class="badge ${result.source.status === 'active' ? 'bg-success' : 'bg-secondary'}">${result.source.status}</span></p>
                    </div>
                    <div class="alert alert-info">
                        <p><i class="bi bi-info-circle"></i> 点击"测试源"来测试这个新建的源适配器。</p>
                        <p><small>源ID: ${result.source.id} 将被用于测试</small></p>
                    </div>
                `;
                
                new bootstrap.Modal(document.getElementById('resultModal')).show();
            })
            .catch(error => {
                hideLoader();
                
                // Show error message
                document.getElementById('resultModalTitle').textContent = '错误';
                document.getElementById('resultModalBody').innerHTML = `
                    <div class="alert alert-danger">
                        <p><strong>创建源失败</strong></p>
                        <p>${error.message}</p>
                    </div>
                `;
                
                new bootstrap.Modal(document.getElementById('resultModal')).show();
            });
        }
        
        // Add new function to test a source
        document.getElementById('testNewSourceBtn').addEventListener('click', function() {
            const sourceId = document.getElementById('sourceId').value;
            
            if (!sourceId) {
                alert('请先输入有效的源ID');
                return;
            }
            
            // 自动为源ID添加custom-前缀，如果尚未添加
            let testId = sourceId;
            if (!testId.startsWith('custom-')) {
                testId = 'custom-' + testId;
            }
            
            debugLog('testNewSourceBtn click, sourceId:', testId);
            
            // 显示提示信息，告知用户测试结果将会显示在哪里
            const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
            document.getElementById('toastMessage').textContent = `正在测试源 ${testId}，结果将显示在"测试结果"标签页中`;
            toast.show();
            
            // 切换到测试结果标签页
            if (document.getElementById('testResultTab')) {
                const tab = new bootstrap.Tab(document.getElementById('testResultTab'));
                tab.show();
            }
            
            // 开始测试
            testSource(testId);
        });
        
        function testSource(sourceId) {
            // 验证sourceId不为空
            if (!sourceId || sourceId.trim() === '') {
                alert('错误：源ID不能为空');
                console.error('测试源失败: 源ID为空');
                return;
            }
            
            // 自动为源ID添加custom-前缀，如果尚未添加
            if (!sourceId.startsWith('custom-')) {
                sourceId = 'custom-' + sourceId;
                debugLog('已自动为测试的源ID添加custom-前缀:', sourceId);
            }
            
            debugLog('开始测试源, sourceId:', sourceId);
            showLoader(`测试源中: ${sourceId}...`);
            
            // 更新测试结果容器状态
            const testResultContainer = document.getElementById('sourceTestResultContainer');
            testResultContainer.innerHTML = `
                <div class="alert alert-info">
                    <div class="d-flex align-items-center">
                        <div class="loading me-3"></div>
                        <p class="mb-0">正在测试源 ${sourceId}...</p>
                    </div>
                </div>
            `;
            
            // 记录当前时间用于计算请求时长
            const startTime = new Date();
            
            // 生成API URL并记录
            const apiUrl = `/api/source-test/test-source/${sourceId}`;
            debugLog('测试源API URL:', apiUrl);
            
            // 检查API是否可用
            fetch('/api/source-test/source-types')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`API服务检查失败: ${response.status} ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(sourceTypes => {
                    // API可用，记录所有源类型
                    debugLog('可用源类型:', sourceTypes);
                    
                    // 继续测试特定源
                    testSpecificSource(sourceId, apiUrl, startTime);
                })
                .catch(error => {
                    // API不可用
                    debugLog('API服务检查失败:', error);
                    
                    hideLoader();
                    testResultContainer.innerHTML = `
                        <div class="alert alert-danger">
                            <p><strong>API服务可能不可用</strong></p>
                            <p>${error.message}</p>
                            <button class="btn btn-sm btn-outline-primary mt-2" onclick="checkApiHealth()">检查API状态</button>
                        </div>
                    `;
                    
                    // 显示错误模态框
                    document.getElementById('resultModalTitle').textContent = 'API服务错误';
                    document.getElementById('resultModalBody').innerHTML = `
                        <div class="alert alert-danger">
                            <p><strong>API服务可能不可用</strong></p>
                            <p>${error.message}</p>
                        </div>
                        <div class="alert alert-warning">
                            <p><strong>可能的原因:</strong></p>
                            <ul>
                                <li>后端API服务未启动或无法访问</li>
                                <li>网络连接问题</li>
                                <li>服务器内部错误</li>
                            </ul>
                        </div>
                        <div class="mt-3">
                            <button class="btn btn-primary" onclick="checkApiHealth()">运行API健康检查</button>
                        </div>
                    `;
                    
                    new bootstrap.Modal(document.getElementById('resultModal')).show();
                });
        }
        
        function testSpecificSource(sourceId, apiUrl, startTime) {
            // Call the API to test the source
            fetch(apiUrl, {
                headers: {
                    'Accept': 'application/json'
                }
            })
            .then(response => {
                const endTime = new Date();
                const requestTime = ((endTime - startTime) / 1000).toFixed(2);
                
                debugLog(`API请求完成，响应状态: ${response.status} ${response.statusText}, 耗时: ${requestTime}秒`);
                console.log(`API请求响应状态: ${response.status} ${response.statusText}, 耗时: ${requestTime}秒`);
                
                if (!response.ok) {
                    if (response.status === 404) {
                        throw new Error(`找不到源 "${sourceId}". API响应: ${response.status} ${response.statusText}`);
                    } else {
                        return response.text().then(errorText => {
                            try {
                                // 尝试解析为JSON
                                const errorJson = JSON.parse(errorText);
                                throw new Error(errorJson.detail || `测试源失败. API响应: ${response.status} ${response.statusText}`);
                            } catch (e) {
                                // 如果不是JSON，则直接使用文本
                                throw new Error(`测试源失败. API响应: ${response.status} ${response.statusText}. 内容: ${errorText.substring(0, 100)}...`);
                            }
                        });
                    }
                }
                return response.json();
            })
            .then(result => {
                hideLoader();
                debugLog('测试源结果:', result);
                
                // 确保关闭所有可能的模态框，防止遮罩层问题
                document.querySelectorAll('.modal').forEach(modal => {
                    const bsModal = bootstrap.Modal.getInstance(modal);
                    if (bsModal) {
                        bsModal.hide();
                    }
                });
                
                // 强制清除所有可能的遮罩层
                document.querySelectorAll('.modal-backdrop').forEach(backdrop => {
                    backdrop.remove();
                });
                document.body.classList.remove('modal-open');
                document.body.style.overflow = '';
                document.body.style.paddingRight = '';
                
                // 更新测试结果容器
                const testResultContainer = document.getElementById('sourceTestResultContainer');
                if (result.success) {
                    testResultContainer.innerHTML = `
                        <div class="alert alert-success">
                            <p><strong>测试成功！</strong></p>
                            <p>URL: <a href="${result.source_url || result.debug_info.url}" target="_blank">${result.source_url || result.debug_info.url}</a></p>
                            <p>源: ${result.source_name || sourceId}</p>
                            <p>找到条目数: ${result.items_count}</p>
                            <p>耗时: ${result.elapsed_time.toFixed(2)} 秒</p>
                        </div>
                        <div class="mb-3">
                            <button class="btn btn-success" id="activateSourceBtn">激活源</button>
                        </div>
                        ${result.items && result.items.length > 0 ? `
                            <div>
                                <h5>示例条目:</h5>
                                <div class="list-group">
                                    ${result.items.slice(0, 3).map(item => `
                                        <div class="list-group-item">
                                            <h6>${item.title}</h6>
                                            ${item.url ? `<p class="mb-1"><small><a href="${item.url}" target="_blank">${item.url}</a></small></p>` : ''}
                                            <p class="mb-0">${item.summary || ''}</p>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        ` : ''}
                        ${(result.items_count === 0 && result.debug_info) ? `
                            <div class="mt-3">
                                <div class="alert alert-warning">
                                    <p><strong>未找到任何条目</strong> - 以下是一些调试信息，可能帮助您调整选择器:</p>
                                </div>
                                <div class="accordion" id="modalDebugAccordion">
                                    <div class="accordion-item">
                                        <h2 class="accordion-header">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#modalLogsCollapse">
                                                调试日志
                                            </button>
                                        </h2>
                                        <div id="modalLogsCollapse" class="accordion-collapse collapse" data-bs-parent="#modalDebugAccordion">
                                            <div class="accordion-body">
                                                <pre class="bg-light p-2" style="max-height: 300px; overflow: auto; font-size: 0.8rem;">${result.debug_info.logs ? result.debug_info.logs.join('\n') : '无调试日志'}</pre>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="accordion-item">
                                        <h2 class="accordion-header">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#modalSelectorsCollapse">
                                                当前选择器
                                            </button>
                                        </h2>
                                        <div id="modalSelectorsCollapse" class="accordion-collapse collapse" data-bs-parent="#modalDebugAccordion">
                                            <div class="accordion-body">
                                                <div class="table-responsive">
                                                    <table class="table table-sm">
                                                        <thead>
                                                            <tr>
                                                                <th>选择器类型</th>
                                                                <th>当前值</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            <tr>
                                                                <td>项目选择器</td>
                                                                <td><code>${result.debug_info.selectors.item || '未设置'}</code></td>
                                                            </tr>
                                                            <tr>
                                                                <td>标题选择器</td>
                                                                <td><code>${result.debug_info.selectors.title || '未设置'}</code></td>
                                                            </tr>
                                                            <tr>
                                                                <td>链接选择器</td>
                                                                <td><code>${result.debug_info.selectors.link || '未设置'}</code></td>
                                                            </tr>
                                                            <tr>
                                                                <td>日期选择器</td>
                                                                <td><code>${result.debug_info.selectors.date || '未设置'}</code></td>
                                                            </tr>
                                                            <tr>
                                                                <td>摘要选择器</td>
                                                                <td><code>${result.debug_info.selectors.summary || '未设置'}</code></td>
                                                            </tr>
                                                            <tr>
                                                                <td>内容选择器</td>
                                                                <td><code>${result.debug_info.selectors.content || '未设置'}</code></td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                                <div class="alert alert-info">
                                                    <p>选择器提示:</p>
                                                    <ul>
                                                        <li>使用 <code>.</code> 指定类名 (例如: <code>.news-item</code>)</li>
                                                        <li>使用 <code>#</code> 指定ID (例如: <code>#news-list</code>)</li>
                                                        <li>使用 <code>标签名</code> 指定HTML标签 (例如: <code>article</code>)</li>
                                                        <li>使用组合选择器指定路径 (例如: <code>div.news > h2</code>)</li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="accordion-item">
                                        <h2 class="accordion-header">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#modalPageStructureCollapse">
                                                页面结构分析
                                            </button>
                                        </h2>
                                        <div id="modalPageStructureCollapse" class="accordion-collapse collapse" data-bs-parent="#modalDebugAccordion">
                                            <div class="accordion-body">
                                                ${result.debug_info.page_debug && Object.keys(result.debug_info.page_debug).length > 0 ? `
                                                <div>
                                                    <h6>潜在适合项目选择器:</h6>
                                                    <div class="list-group mb-3">
                                                        ${result.debug_info.page_debug.potential_item_selectors ? result.debug_info.page_debug.potential_item_selectors.map(item => `
                                                            <button class="list-group-item list-group-item-action" onclick="setSelector('item', '${item.selector}')">
                                                                <code>${item.selector}</code>
                                                                <span class="badge bg-primary float-end">${item.count} 个元素</span>
                                                                ${item.example ? `<small class="d-block text-muted mt-1">示例: ${item.example.substring(0, 60)}...</small>` : ''}
                                                            </button>
                                                        `).join('') : '<div class="alert alert-warning">未找到潜在的项目选择器</div>'}
                                                    </div>
                                                    
                                                    <h6>常见内容块:</h6>
                                                    <div class="list-group mb-3">
                                                        ${result.debug_info.page_debug.common_blocks ? result.debug_info.page_debug.common_blocks.map(item => `
                                                            <div class="list-group-item">
                                                                <code>${item.selector}</code>
                                                                <span class="badge bg-info float-end">${item.count} 个元素</span>
                                                                ${item.text ? `<small class="d-block text-muted mt-1">文本: ${item.text.substring(0, 60)}...</small>` : ''}
                                                            </div>
                                                        `).join('') : '<div class="alert alert-warning">未找到常见内容块</div>'}
                                                    </div>
                                                    
                                                    ${result.debug_info.page_debug.detected_titles ? `
                                                    <h6>检测到的标题:</h6>
                                                    <div class="list-group mb-3">
                                                        ${result.debug_info.page_debug.detected_titles.map(item => `
                                                            <button class="list-group-item list-group-item-action" onclick="setSelector('title', '${item.selector}')">
                                                                <code>${item.selector}</code>
                                                                <span class="badge bg-success float-end">${item.count} 个元素</span>
                                                                ${item.text ? `<small class="d-block text-muted mt-1">示例: ${item.text.substring(0, 60)}...</small>` : ''}
                                                            </button>
                                                        `).join('')}
                                                    </div>
                                                    ` : ''}
                                                    
                                                    ${result.debug_info.page_debug.detected_links ? `
                                                    <h6>检测到的链接:</h6>
                                                    <div class="list-group mb-3">
                                                        ${result.debug_info.page_debug.detected_links.map(item => `
                                                            <button class="list-group-item list-group-item-action" onclick="setSelector('link', '${item.selector}')">
                                                                <code>${item.selector}</code>
                                                                <span class="badge bg-success float-end">${item.count} 个元素</span>
                                                                ${item.href ? `<small class="d-block text-muted mt-1">示例: ${item.href.substring(0, 60)}...</small>` : ''}
                                                            </button>
                                                        `).join('')}
                                                    </div>
                                                    ` : ''}
                                                    
                                                    ${result.debug_info.page_debug.detected_dates ? `
                                                    <h6>检测到的日期:</h6>
                                                    <div class="list-group mb-3">
                                                        ${result.debug_info.page_debug.detected_dates.map(item => `
                                                            <button class="list-group-item list-group-item-action" onclick="setSelector('date', '${item.selector}')">
                                                                <code>${item.selector}</code>
                                                                <span class="badge bg-success float-end">${item.count} 个元素</span>
                                                                ${item.text ? `<small class="d-block text-muted mt-1">示例: ${item.text.substring(0, 60)}...</small>` : ''}
                                                            </button>
                                                        `).join('')}
                                                    </div>
                                                    ` : ''}
                                                </div>
                                                ` : `
                                                <div class="alert alert-info">
                                                    <p>此源未提供页面结构分析。这可能是因为:</p>
                                                    <ul>
                                                        <li>源没有使用Selenium</li>
                                                        <li>分析过程中发生错误</li>
                                                        <li>页面结构不适合自动分析</li>
                                                    </ul>
                                                    ${result.debug_info.use_selenium ? '' : '<p><strong>注意:</strong> 启用Selenium可以获得更详细的页面结构分析</p>'}
                                                </div>
                                                `}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="mt-3">
                                    <p>要检查页面HTML和选择器，建议使用浏览器开发者工具:</p>
                                    <ol>
                                        <li class="mb-2">
                                            <strong>目标网站地址:</strong>
                                            <div class="input-group mb-2 mt-1">
                                                <input type="text" class="form-control" value="${result.source_url || result.debug_info.url}" readonly />
                                                <a href="${result.source_url || result.debug_info.url}" target="_blank" class="btn btn-primary">
                                                    <i class="bi bi-box-arrow-up-right"></i> 在新标签页打开
                                                </a>
                                            </div>
                                        </li>
                                        <li>按 F12 或右键点击 -> 检查元素，打开开发者工具</li>
                                        <li>使用元素选择器工具(按下Ctrl+Shift+C或点击开发者工具左上角的箭头图标)，点击页面上的新闻项目</li>
                                        <li>观察高亮显示的HTML代码，确定合适的选择器</li>
                                    </ol>
                                </div>
                            </div>
                        ` : ''}
                        <div class="mt-3">
                            <p><strong>技术信息:</strong></p>
                            <pre class="bg-light p-2 border" style="max-height: 200px; overflow: auto; font-size: 0.8rem;">${JSON.stringify(result, null, 2)}</pre>
                        </div>
                    `;
                    
                    // 自动切换到测试结果标签页
                    const testResultTab = document.getElementById('testResultTab');
                    if (testResultTab) {
                        // 创建一个bootstrap tab实例并显示
                        const tab = new bootstrap.Tab(testResultTab);
                        tab.show();
                        
                        // 向用户显示成功提示
                        const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                        document.getElementById('toastMessage').textContent = `源 ${sourceId} 测试成功，找到 ${result.items_count} 条内容！`;
                        toast.show();
                    }
                    
                    // Add event listener for activate button
                    document.getElementById('activateSourceBtn').addEventListener('click', function() {
                        activateSource(sourceId);
                    });
                } else {
                    // Display error in test result container
                    testResultContainer.innerHTML = `
                        <div class="alert alert-danger">
                            <p><strong>源测试失败</strong></p>
                            <p>${result.error || '发生未知错误'}</p>
                        </div>
                    `;
                    
                    // Display error in modal
                    document.getElementById('resultModalTitle').textContent = '测试失败';
                    document.getElementById('resultModalBody').innerHTML = `
                        <div class="alert alert-danger">
                            <p><strong>源测试失败</strong></p>
                            <p>${result.error || '发生未知错误'}</p>
                        </div>
                        <div class="mt-3">
                            <p><strong>错误详情:</strong></p>
                            <pre class="bg-light p-2 border" style="max-height: 200px; overflow: auto; font-size: 0.8rem;">${JSON.stringify(result, null, 2)}</pre>
                        </div>
                    `;
                }
                
                // Show modal if not already visible
                if (!document.querySelector('.modal.show')) {
                    new bootstrap.Modal(document.getElementById('resultModal')).show();
                }
            })
            .catch(error => {
                hideLoader();
                debugLog('测试源错误:', error);
                
                // 确保关闭所有可能的模态框，防止遮罩层问题
                document.querySelectorAll('.modal').forEach(modal => {
                    const bsModal = bootstrap.Modal.getInstance(modal);
                    if (bsModal) {
                        bsModal.hide();
                    }
                });
                
                // 强制清除所有可能的遮罩层
                document.querySelectorAll('.modal-backdrop').forEach(backdrop => {
                    backdrop.remove();
                });
                document.body.classList.remove('modal-open');
                document.body.style.overflow = '';
                document.body.style.paddingRight = '';
                
                // 更新测试结果容器
                const testResultContainer = document.getElementById('sourceTestResultContainer');
                testResultContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <p><strong>测试源失败</strong></p>
                        <p>${error.message}</p>
                        <button class="btn btn-sm btn-outline-primary mt-2" onclick="testSource('${sourceId}')">重试</button>
                    </div>
                `;
                
                // Show error message in modal
                document.getElementById('resultModalTitle').textContent = '测试源失败';
                document.getElementById('resultModalBody').innerHTML = `
                    <div class="alert alert-danger">
                        <p><strong>测试源失败</strong></p>
                        <p>${error.message}</p>
                    </div>
                    <div class="alert alert-warning">
                        <p><strong>可能的原因:</strong></p>
                        <ul>
                            <li>源 ID "${sourceId}" 可能不存在或尚未注册</li>
                            <li>服务器上的源适配器加载失败</li>
                            <li>源配置可能不正确</li>
                        </ul>
                    </div>
                    <div class="mt-3">
                        <p>检查源ID是否正确，然后重试。</p>
                        <p>当前API请求路径: <code>/api/source-test/test-source/${sourceId}</code></p>
                        <div class="alert alert-info">
                            <p><strong>调试信息:</strong></p>
                            <p>请求时间: ${new Date().toLocaleString()}</p>
                            <p>浏览器: ${navigator.userAgent}</p>
                            <p>如果问题持续出现，请尝试以下步骤:</p>
                            <ol>
                                <li>检查浏览器控制台是否有更详细的错误信息</li>
                                <li>确认后端服务运行正常</li>
                                <li>尝试直接在浏览器中访问: <a href="/api/source-test/source-types" target="_blank">/api/source-test/source-types</a> 验证API是否可用</li>
                                <li>检查源ID命名是否符合规范（仅使用小写字母、数字和连字符）</li>
                            </ol>
                        </div>
                        <button class="btn btn-sm btn-secondary mt-2" onclick="showDirectApiTest('${sourceId}')">显示API直接测试工具</button>
                    </div>
                `;
                
                new bootstrap.Modal(document.getElementById('resultModal')).show();
            });
        }
        
        // 添加API直接测试工具函数
        function showDirectApiTest(sourceId) {
            // 在结果模态框中添加API测试表单
            const testForm = document.createElement('div');
            testForm.className = 'mt-4 p-3 border rounded bg-light';
            testForm.innerHTML = `
                <h5>API直接测试工具</h5>
                <div class="mb-3">
                    <label class="form-label">API端点:</label>
                    <div class="input-group">
                        <input type="text" class="form-control" id="apiTestUrl" value="/api/source-test/test-source/${sourceId}" />
                        <input type="number" class="form-control" id="apiTimeout" placeholder="超时(秒)" value="60" style="max-width: 100px;" />
                        <button class="btn btn-primary" id="testApiDirectBtn">测试</button>
                    </div>
                    <div class="form-text">可以修改端点路径或参数进行测试</div>
                </div>
                <div class="mb-3" id="apiTestResult">
                    <div class="alert alert-info">点击"测试"按钮开始API测试</div>
                </div>
            `;
            
            document.getElementById('resultModalBody').appendChild(testForm);
            
            // 添加测试按钮事件
            document.getElementById('testApiDirectBtn').addEventListener('click', function() {
                const apiUrl = document.getElementById('apiTestUrl').value;
                const timeout = document.getElementById('apiTimeout').value;
                const resultContainer = document.getElementById('apiTestResult');
                
                resultContainer.innerHTML = `
                    <div class="alert alert-info">
                        <div class="d-flex align-items-center">
                            <div class="loading me-3"></div>
                            <p class="mb-0">正在测试API: ${apiUrl}?timeout=${timeout}...</p>
                        </div>
                    </div>
                `;
                
                // 执行API请求
                const startTime = new Date();
                fetch(`${apiUrl}?timeout=${timeout}`)
                    .then(response => {
                        const endTime = new Date();
                        const requestTime = ((endTime - startTime) / 1000).toFixed(2);
                        
                        // 显示响应头信息
                        const headers = Array.from(response.headers.entries())
                            .map(([key, value]) => `<tr><td>${key}</td><td>${value}</td></tr>`)
                            .join('');
                        
                        if (!response.ok) {
                            return response.text().then(text => {
                                let errorDetail = text;
                                try {
                                    const errorJson = JSON.parse(text);
                                    errorDetail = JSON.stringify(errorJson, null, 2);
                                } catch (e) {
                                    // Keep as text if not JSON
                                }
                                
                                resultContainer.innerHTML = `
                                    <div class="alert alert-danger">
                                        <p><strong>API请求失败</strong> (${response.status} ${response.statusText})</p>
                                        <p>请求时间: ${requestTime}秒</p>
                                        <p>错误详情:</p>
                                        <pre class="bg-dark text-light p-2 mt-2" style="max-height: 200px; overflow: auto;">${errorDetail}</pre>
                                        <p class="mt-2">响应头:</p>
                                        <div style="max-height: 150px; overflow: auto;">
                                            <table class="table table-sm table-bordered">
                                                <thead><tr><th>名称</th><th>值</th></tr></thead>
                                                <tbody>${headers}</tbody>
                                            </table>
                                        </div>
                                    </div>
                                `;
                                throw new Error(`API请求失败: ${response.status} ${response.statusText}`);
                            });
                        }
                        
                        return response.json().then(data => {
                            resultContainer.innerHTML = `
                                <div class="alert alert-success">
                                    <p><strong>API请求成功</strong> (${response.status} ${response.statusText})</p>
                                    <p>请求时间: ${requestTime}秒</p>
                                    <p>响应数据:</p>
                                    <pre class="bg-dark text-light p-2 mt-2" style="max-height: 200px; overflow: auto;">${JSON.stringify(data, null, 2)}</pre>
                                    <p class="mt-2">响应头:</p>
                                    <div style="max-height: 150px; overflow: auto;">
                                        <table class="table table-sm table-bordered">
                                            <thead><tr><th>名称</th><th>值</th></tr></thead>
                                            <tbody>${headers}</tbody>
                                        </table>
                                    </div>
                                </div>
                            `;
                            return data;
                        });
                    })
                    .catch(error => {
                        resultContainer.innerHTML = `
                            <div class="alert alert-danger">
                                <p><strong>请求发生错误</strong></p>
                                <p>${error.message}</p>
                            </div>
                        `;
                    });
            });
        }
        
        function activateSource(sourceId) {
            showLoader(`激活源中: ${sourceId}...`);
            
            // Call the API to activate the source
            fetch(`/api/sources/${sourceId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + (localStorage.getItem('auth_token') || ''),
                    'X-API-Key': localStorage.getItem('api_key') || ''
                },
                body: JSON.stringify({
                    status: 'active'
                }),
                credentials: 'include' // 包含cookies，这对于会话认证很重要
            })
            .then(response => {
                if (!response.ok) {
                    // 详细记录错误
                    console.error('激活源失败，状态码:', response.status, response.statusText);
                    return response.text().then(text => {
                        let errorDetail = '激活源失败';
                        try {
                            const errorJson = JSON.parse(text);
                            errorDetail = errorJson.detail || `API错误: ${response.status} ${response.statusText}`;
                            console.error('API错误详情:', errorJson);
                        } catch (e) {
                            // 如果不是JSON，直接使用文本
                            errorDetail = `API错误: ${response.status} ${response.statusText}. ${text}`;
                            console.error('API响应内容:', text);
                        }
                        throw new Error(errorDetail);
                    });
                }
                return response.json();
            })
            .then(result => {
                hideLoader();
                
                // 显示成功提示
                const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                document.getElementById('toastMessage').textContent = `源 "${result.name}" 已成功激活！`;
                toast.show();
                
                // 更新源列表以反映状态变化
                loadSources();
                
                // Show success message
                document.getElementById('resultModalTitle').textContent = '源已激活';
                document.getElementById('resultModalBody').innerHTML = `
                    <div class="alert alert-success">
                        <p><strong>源 "${result.name}" 已成功激活！</strong></p>
                        <p>源现在处于活动状态，将用于新闻聚合。</p>
                    </div>
                    <p>您可以在"管理源"部分管理此源。</p>
                `;
                
                // 显示模态框
                new bootstrap.Modal(document.getElementById('resultModal')).show();
            })
            .catch(error => {
                hideLoader();
                
                console.error('激活源时出错:', error);
                
                // 检查是否是认证错误
                if (error.message.includes('Not authenticated') || 
                    error.message.includes('401') || 
                    error.message.includes('auth') || 
                    error.message.includes('认证')) {
                    
                    // 处理认证错误
                    handleAuthError(error, () => {
                        // 认证成功后重新尝试激活
                        activateSource(sourceId);
                    });
                    return;
                }
                
                // 使用Toast显示错误
                const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                document.getElementById('toastMessage').textContent = `激活源失败: ${error.message}`;
                document.getElementById('notificationToast').classList.add('bg-danger', 'text-white');
                toast.show();
                
                // 5秒后恢复原来的样式
                setTimeout(() => {
                    document.getElementById('notificationToast').classList.remove('bg-danger', 'text-white');
                }, 5000);
                
                // Show error message
                document.getElementById('resultModalTitle').textContent = '错误';
                document.getElementById('resultModalBody').innerHTML = `
                    <div class="alert alert-danger">
                        <p><strong>激活源失败</strong></p>
                        <p>${error.message}</p>
                    </div>
                `;
                
                // 显示模态框
                new bootstrap.Modal(document.getElementById('resultModal')).show();
            });
        }
        
        function loadSources() {
            const sourceListContainer = document.getElementById('sourceListContainer');
            
            // Show loading indicator
            sourceListContainer.innerHTML = `
                <div class="text-center py-3">
                    <div class="loading"></div>
                    <p class="mt-2">加载源中...</p>
                </div>
            `;
            
            // Fetch sources from API
            fetch('/api/sources')
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.detail || '加载源失败');
                    });
                }
                return response.json();
            })
            .then(sources => {
                // Filter to show only custom sources
                const customSources = sources.filter(source => 
                    source.config && 
                    source.config.auto_generated
                );
                
                if (customSources.length === 0) {
                    sourceListContainer.innerHTML = `
                        <div class="alert alert-info">
                            <p>未找到自定义源。请先创建一个新源。</p>
                        </div>
                    `;
                    return;
                }
                
                // Render sources
                sourceListContainer.innerHTML = '';
                
                customSources.forEach(source => {
                    const sourceItem = document.createElement('a');
                    sourceItem.href = '#';
                    sourceItem.className = 'list-group-item list-group-item-action source-list-item';
                    sourceItem.dataset.sourceId = source.id;
                    
                    // Determine status badge class
                    let statusBadgeClass = 'bg-secondary';
                    if (source.status === 'active') statusBadgeClass = 'bg-success';
                    if (source.status === 'error') statusBadgeClass = 'bg-danger';
                    if (source.status === 'warning') statusBadgeClass = 'bg-warning text-dark';
                    
                    sourceItem.innerHTML = `
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="mb-0">${source.name}</h6>
                                <small class="text-muted">${source.id}</small>
                            </div>
                            <span class="badge ${statusBadgeClass}">${source.status}</span>
                        </div>
                    `;
                    
                    // Add click event
                    sourceItem.addEventListener('click', (e) => {
                        e.preventDefault();
                        
                        // Remove active class from all sources
                        document.querySelectorAll('.source-list-item').forEach(item => {
                            item.classList.remove('active');
                        });
                        
                        // Add active class to this source
                        sourceItem.classList.add('active');
                        
                        // Load source details
                        loadSourceDetails(source.id);
                        
                        // Enable action buttons
                        document.getElementById('testSelectedSourceBtn').disabled = false;
                        document.getElementById('activateSourceBtn').disabled = source.status === 'active';
                        document.getElementById('deactivateSourceBtn').disabled = source.status !== 'active';
                        document.getElementById('deleteSourceBtn').disabled = false;
                    });
                    
                    sourceListContainer.appendChild(sourceItem);
                });
            })
            .catch(error => {
                console.error('Error loading sources:', error);
                
                sourceListContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <p><strong>加载源失败</strong></p>
                        <p>${error.message}</p>
                        <button class="btn btn-sm btn-outline-primary mt-2" onclick="loadSources()">重试</button>
                    </div>
                `;
            });
        }
        
        function loadSourceDetails(sourceId) {
            // Show loading indicator in all tabs
            document.getElementById('sourceDetailsContainer').innerHTML = `
                <div class="text-center py-3">
                    <div class="loading"></div>
                    <p class="mt-2">加载详情中...</p>
                </div>
            `;
            
            document.getElementById('sourceStatsContainer').innerHTML = `
                <div class="text-center py-3">
                    <div class="loading"></div>
                    <p class="mt-2">加载统计信息中...</p>
                </div>
            `;
            
            document.getElementById('sourceConfigContainer').innerHTML = `
                <div class="text-center py-3">
                    <div class="loading"></div>
                    <p class="mt-2">加载配置中...</p>
                </div>
            `;
            
            document.getElementById('sourceTestResultContainer').innerHTML = `
                <div class="alert alert-info">
                    <p>点击"测试源"来运行测试并查看结果。</p>
                </div>
            `;
            
            // Set selected source
            selectedSource = sourceId;
            
            // Fetch source details from API
            Promise.all([
                fetch(`/api/sources/${sourceId}`).then(response => response.json()),
                fetch(`/api/sources/${sourceId}/stats`).then(response => response.json()).catch(() => ({}))
            ])
            .then(([sourceDetails, sourceStats]) => {
                // Display source details
                displaySourceDetails(sourceDetails);
                
                // Display source stats
                displaySourceStats(sourceStats);
                
                // Display source config
                displaySourceConfig(sourceDetails);
            })
            .catch(error => {
                console.error('Error loading source details:', error);
                
                document.getElementById('sourceDetailsContainer').innerHTML = `
                    <div class="alert alert-danger">
                        <p><strong>加载源详情失败</strong></p>
                        <p>${error.message}</p>
                    </div>
                `;
            });
        }
        
        function displaySourceDetails(source) {
            const container = document.getElementById('sourceDetailsContainer');
            
            container.innerHTML = `
                <div class="mb-3">
                    <h5>${source.name}</h5>
                    <p class="text-muted">${source.description || '无描述可用'}</p>
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <h6>基本信息</h6>
                        <table class="table table-sm">
                            <tr>
                                <th>ID</th>
                                <td>${source.id}</td>
                            </tr>
                            <tr>
                                <th>URL</th>
                                <td>${source.url ? `<a href="${source.url}" target="_blank">${source.url}</a>` : '<span class="text-danger">未设置</span> <small class="text-muted">(您需要在编辑详情中设置URL)</small>'}</td>
                            </tr>
                            <tr>
                                <th>类型</th>
                                <td>${source.type}</td>
                            </tr>
                            <tr>
                                <th>状态</th>
                                <td><span class="badge ${getStatusBadgeClass(source.status)}">${source.status}</span></td>
                            </tr>
                            <tr>
                                <th>类别</th>
                                <td>${source.category_id || '无'}</td>
                            </tr>
                        </table>
                    </div>
                    
                    <div class="col-md-6">
                        <h6>附加信息</h6>
                        <table class="table table-sm">
                            <tr>
                                <th>国家</th>
                                <td>${source.country || '未指定'}</td>
                            </tr>
                            <tr>
                                <th>语言</th>
                                <td>${source.language || '未指定'}</td>
                            </tr>
                            <tr>
                                <th>更新间隔</th>
                                <td>${formatSeconds(source.update_interval)}</td>
                            </tr>
                            <tr>
                                <th>缓存TTL</th>
                                <td>${formatSeconds(source.cache_ttl)}</td>
                            </tr>
                            <tr>
                                <th>创建时间</th>
                                <td>${formatDate(source.created_at)}</td>
                            </tr>
                            <tr>
                                <th>最后更新</th>
                                <td>${formatDate(source.updated_at)}</td>
                            </tr>
                        </table>
                    </div>
                </div>
                
                <div class="d-flex justify-content-end mt-3">
                    <button class="btn btn-outline-primary me-2" id="editDetailsBtn">
                        <i class="bi bi-pencil"></i> 编辑详情
                    </button>
                </div>
            `;
            
            // Add event listener for edit button
            document.getElementById('editDetailsBtn').addEventListener('click', () => {
                openEditModal(source);
            });
        }
        
        function displaySourceStats(stats) {
            const container = document.getElementById('sourceStatsContainer');
            
            if (!stats || Object.keys(stats).length === 0) {
                container.innerHTML = `
                    <div class="alert alert-info">
                        <p>暂无可用的统计信息。</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title">新闻数量</h6>
                                <p class="card-text display-6">${stats.news_count || 0}</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title">最后更新</h6>
                                <p class="card-text">${formatDate(stats.last_updated) || '从未'}</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="row mt-3">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title">错误数量</h6>
                                <p class="card-text display-6">${stats.error_count || 0}</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title">最后错误</h6>
                                <p class="card-text text-danger">${stats.last_error || '无'}</p>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        function displaySourceConfig(source) {
            const container = document.getElementById('sourceConfigContainer');
            
            if (!source.config) {
                container.innerHTML = `
                    <div class="alert alert-info">
                        <p>无可用的配置信息。</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = `
                <div class="mb-3">
                    <h6>源配置</h6>
                    <div id="configViewEditor"></div>
                </div>
                
                <div class="d-flex justify-content-end mt-3">
                    <button class="btn btn-outline-primary" id="editConfigBtn">
                        <i class="bi bi-pencil"></i> 编辑配置
                    </button>
                </div>
            `;
            
            // Initialize CodeMirror
            const configViewEditor = CodeMirror(document.getElementById('configViewEditor'), {
                value: JSON.stringify(source.config, null, 2),
                mode: { name: 'javascript', json: true },
                theme: 'monokai',
                lineNumbers: true,
                readOnly: true
            });
            
            // Add event listener for edit button
            document.getElementById('editConfigBtn').addEventListener('click', () => {
                openEditModal(source, 'config');
            });
        }
        
        function openEditModal(source, tab = 'details') {
            // Set up modal form
            document.getElementById('editSourceId').value = source.id;
            document.getElementById('editSourceName').value = source.name;
            document.getElementById('editSourceUrl').value = source.url;
            document.getElementById('editSourceCategory').value = source.category || 'news';
            document.getElementById('editSourceStatus').value = source.status;
            document.getElementById('editUpdateInterval').value = source.update_interval;
            document.getElementById('editCacheTtl').value = source.cache_ttl;
            
            // Set up config editor
            configEditor.setValue(JSON.stringify(source.config || {}, null, 2));
            
            // Show modal
            new bootstrap.Modal(document.getElementById('editSourceModal')).show();
            
            // Set up save button
            document.getElementById('saveSourceBtn').onclick = () => saveSource(source.id);
        }
        
        function saveSource(sourceId) {
            showLoader('保存更改中...');
            
            // Get form data
            const data = {
                name: document.getElementById('editSourceName').value,
                url: document.getElementById('editSourceUrl').value,
                category: document.getElementById('editSourceCategory').value,
                status: document.getElementById('editSourceStatus').value,
                update_interval: parseInt(document.getElementById('editUpdateInterval').value),
                cache_ttl: parseInt(document.getElementById('editCacheTtl').value)
            };
            
            // Try to parse JSON config
            try {
                data.config = JSON.parse(configEditor.getValue());
            } catch (error) {
                hideLoader();
                alert('JSON配置无效: ' + error.message);
                return;
            }
            
            // Update source
            fetch(`/api/sources/${sourceId}`, {
            fetch(`/api/sources/${sourceId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            })
            .then(response => {
                if (!response.ok) {
                    // 详细记录错误
                    console.error('更新源失败，状态码:', response.status, response.statusText);
                    return response.text().then(text => {
                        let errorDetail = '更新源失败';
                        try {
                            const errorJson = JSON.parse(text);
                            errorDetail = errorJson.detail || `API错误: ${response.status} ${response.statusText}`;
                            console.error('API错误详情:', errorJson);
                        } catch (e) {
                            // 如果不是JSON，直接使用文本
                            errorDetail = `API错误: ${response.status} ${response.statusText}. ${text}`;
                            console.error('API响应内容:', text);
                        }
                        throw new Error(errorDetail);
                    });
                }
                return response.json();
            })
            .then(result => {
                hideLoader();
                
                // 显示成功提示
                const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                document.getElementById('toastMessage').textContent = `源 ${data.name} 更新成功！`;
                toast.show();
                
                if (error.message.includes('Not authenticated') || 
                    error.message.includes('401') || 
                    error.message.includes('auth') || 
                    error.message.includes('认证')) {
                    
                    // 处理认证错误
                    handleAuthError(error, () => {
                        // 认证成功后重新尝试保存
                        saveSource(sourceId);
                    });
                    return;
                }
                
                // 使用Toast显示错误，而不是alert
                const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                document.getElementById('toastMessage').textContent = `更新源失败: ${error.message}`;
                document.getElementById('notificationToast').classList.add('bg-danger', 'text-white');
                toast.show();
                
                // 5秒后恢复原来的样式
                setTimeout(() => {
                    document.getElementById('notificationToast').classList.remove('bg-danger', 'text-white');
                }, 5000);
            });
        }
        
        // Helper functions for formatting
        function formatSeconds(seconds) {
            if (!seconds) return '未指定';
            
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            
            let result = '';
            if (hours > 0) result += `${hours}小时 `;
            if (minutes > 0) result += `${minutes}分钟 `;
            if (secs > 0 || result === '') result += `${secs}秒`;
            
            return result;
        }
        
        function formatDate(dateStr) {
            if (!dateStr) return '不可用';
            
            const date = new Date(dateStr);
            return date.toLocaleString();
        }
        
        function getStatusBadgeClass(status) {
            switch (status) {
                case 'active': return 'bg-success';
                case 'error': return 'bg-danger';
                case 'warning': return 'bg-warning text-dark';
                case 'inactive': return 'bg-secondary';
                default: return 'bg-secondary';
            }
        }
        
            .then(result => {
                hideLoader();
                
            fetch(`/api/sources/${sourceId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.detail || '删除源失败');
                    });
                }
                return response.json();
            })
                        <p>从列表中选择一个源以查看其统计信息。</p>
                    </div>
                `;
                
                document.getElementById('sourceConfigContainer').innerHTML = `
                    <div class="alert alert-info">
                        <p>从列表中选择一个源以查看和编辑其配置。</p>
                    </div>
                `;
                
                document.getElementById('sourceTestResultContainer').innerHTML = `
                    <div class="alert alert-info">
                        <p>点击"测试源"来运行测试并查看结果。</p>
                    </div>
                `;
                
                // Disable action buttons
                document.getElementById('testSelectedSourceBtn').disabled = true;
                document.getElementById('activateSourceBtn').disabled = true;
                document.getElementById('deactivateSourceBtn').disabled = true;
                document.getElementById('deleteSourceBtn').disabled = true;
                
                // Show notification
                alert(`源 "${sourceId}" 已成功删除`);
            })
            .catch(error => {
                hideLoader();
                
                alert('删除源失败: ' + error.message);
            });
        }
        
        // 添加HTML分析函数
        function analyzeHtml() {
            showLoader('分析HTML结构中...');
            
            try {
                const htmlContent = htmlEditor.getValue();
                if (!htmlContent || htmlContent.trim().length < 100) {
                    alert('请先粘贴有效的HTML内容');
                    hideLoader();
                    return;
                }
                
                // 创建一个临时DOM解析器
                const parser = new DOMParser();
                const htmlDoc = parser.parseFromString(htmlContent, 'text/html');
                
                // 存储发现的选择器
                const foundSelectors = {
                    item: [],
                    title: [],
                    link: [],
                    date: [],
                    summary: [],
                    content: []
                };
                
                // 1. 查找可能的条目选择器 - 增强版
                const possibleItemSelectors = [
                    // 常见的文章容器
                    'article', '.article', '.news-item', '.post', '.entry', 
                    // 常见的列表项
                    '.item', 'li.news', '.news-card', '.card', '.list-item',
                    // 常见的新闻网格项
                    '.grid-item', '.news-block', '.news-cell', '.news-box',
                    // 定义列表结构
                    'dl', 'dl.newsDl', '.newsDl', 'dl.clearfix',
                    // 通用类选择器
                    '[class*="news"]', '[class*="article"]', '[class*="post"]',
                    // 直接子元素模式
                    '.liveNews > dl', '.newsList > li', '.newsBox > div'
                ];
                
                let bestItemSelector = '';
                let maxItems = 0;
                
                possibleItemSelectors.forEach(selector => {
                    try {
                        const items = htmlDoc.querySelectorAll(selector);
                        if (items.length > 1 && items.length > maxItems) {
                            // 如果找到多个项目，很可能是新闻条目
                            maxItems = items.length;
                            bestItemSelector = selector;
                            foundSelectors.item.push({
                                selector: selector,
                                count: items.length
                            });
                        }
                    } catch (e) {
                        // 忽略无效选择器
                    }
                });
                
                // 2. 特殊处理：如果没有找到明确的条目选择器，尝试分析更复杂的结构
                if (maxItems <= 3) {
                    // 尝试查找通用重复模式
                    const containers = [
                        '.liveNews', '.newsBox', '.newsList', '.newsContainer'
                    ];
                    
                    for (const container of containers) {
                        try {
                            const parentElement = htmlDoc.querySelector(container);
                            if (parentElement) {
                                // 查找具有重复结构的子元素
                                const childElements = parentElement.children;
                                if (childElements.length > 3) {
                                    // 找到一个可能包含多条新闻的父容器
                                    const containerTagName = parentElement.tagName.toLowerCase();
                                    const childrenTagNames = Array.from(childElements).map(el => el.tagName.toLowerCase());
                                    
                                    // 获取最常见的子元素类型
                                    const mostCommonChildTag = childrenTagNames.sort((a, b) => 
                                        childrenTagNames.filter(t => t === a).length - 
                                        childrenTagNames.filter(t => t === b).length
                                    ).pop();
                                    
                                    if (mostCommonChildTag) {
                                        const selector = `${container} > ${mostCommonChildTag}`;
                                        const items = htmlDoc.querySelectorAll(selector);
                                        
                                        if (items.length > maxItems) {
                                            maxItems = items.length;
                                            bestItemSelector = selector;
                                            foundSelectors.item.push({
                                                selector: selector,
                                                count: items.length
                                            });
                                        }
                                    }
                                }
                            }
                        } catch (e) {
                            // 忽略错误，继续查找
                        }
                    }
                }
                
                // 3. 根据找到的最佳条目选择器，尝试找出其中的标题、链接等 - 增强版
                if (bestItemSelector && maxItems > 0) {
                    const items = htmlDoc.querySelectorAll(bestItemSelector);
                    const firstItem = items[0];
                    const secondItem = items.length > 1 ? items[1] : null;
                    
                    // 检查是否是dl/dt/dd结构
                    const isDlStructure = bestItemSelector.includes('dl') || firstItem.tagName.toLowerCase() === 'dl';
                    
                    if (isDlStructure) {
                        // 对于dl/dt/dd结构的特殊处理
                        
                        // 1. 查找标题 - 通常在dd里面的a标签或p>a结构中
                        const titleSelectors = [
                            'dd a', 'dd > p > a', 'a', 'p > a', 'dd'
                        ];
                        
                        for (const selector of titleSelectors) {
                            try {
                                const titleElem = firstItem.querySelector(selector);
                                if (titleElem && titleElem.textContent.trim()) {
                                    foundSelectors.title.push({
                                        selector: selector,
                                        text: titleElem.textContent.trim().substring(0, 50)
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                        
                        // 2. 查找链接 - 通常在dd里面的a标签
                        const linkSelectors = [
                            'dd a', 'dd > p > a', 'a'
                        ];
                        
                        for (const selector of linkSelectors) {
                            try {
                                const linkElem = firstItem.querySelector(selector);
                                if (linkElem && linkElem.getAttribute('href')) {
                                    foundSelectors.link.push({
                                        selector: selector,
                                        href: linkElem.getAttribute('href')
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                        
                        // 3. 查找日期 - 通常在dt标签或特定的日期容器中
                        const dateSelectors = [
                            'dt', '.timeBox', '.date', '.time', 'time'
                        ];
                        
                        // 首先尝试找到父级的日期元素
                        const parentNode = firstItem.parentNode;
                        if (parentNode) {
                            for (const selector of dateSelectors) {
                                try {
                                    const dateElements = parentNode.querySelectorAll(selector);
                                    if (dateElements.length > 0) {
                                        for (const dateElem of dateElements) {
                                            const dateText = dateElem.textContent.trim();
                                            if (dateText && isLikelyDateString(dateText)) {
                                                foundSelectors.date.push({
                                                    selector: `.liveNews > ${selector}`,
                                                    text: dateText,
                                                    isParent: true
                                                });
                                            }
                                        }
                                    }
                                } catch (e) {
                                    // 忽略错误，继续查找
                                }
                            }
                        }
                        
                        // 然后尝试在条目内找日期
                        for (const selector of dateSelectors) {
                            try {
                                const dateElem = firstItem.querySelector(selector);
                                if (dateElem && dateElem.textContent.trim()) {
                                    const dateText = dateElem.textContent.trim();
                                    foundSelectors.date.push({
                                        selector: selector,
                                        text: dateText
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                        
                    } else {
                        // 普通结构的处理
                        
                        // 查找标题
                        const possibleTitleSelectors = [
                            'h1', 'h2', 'h3', 'h4', '.title', '.headline', '.news-title',
                            '[class*="title"]', '[class*="headline"]', '.subject', 'strong',
                            'a', 'p > a', '.link-title', 'p.title', 'p'
                        ];
                        
                        for (const selector of possibleTitleSelectors) {
                            try {
                                const titleElem = firstItem.querySelector(selector);
                                if (titleElem && titleElem.textContent.trim()) {
                                    foundSelectors.title.push({
                                        selector: selector,
                                        text: titleElem.textContent.trim().substring(0, 50)
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                        
                        // 查找链接
                        const possibleLinkSelectors = [
                            'a', 'a.link', '.link a', 'h3 a', 'h2 a', '.title a',
                            '.headline a', '[class*="title"] a', 'p > a', 'p a'
                        ];
                        
                        for (const selector of possibleLinkSelectors) {
                            try {
                                const linkElem = firstItem.querySelector(selector);
                                if (linkElem && linkElem.getAttribute('href')) {
                                    foundSelectors.link.push({
                                        selector: selector,
                                        href: linkElem.getAttribute('href')
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                        
                        // 查找日期
                        const possibleDateSelectors = [
                            'time', '.date', '.time', '.timestamp', '.pubDate',
                            '[class*="date"]', '[class*="time"]', '.meta time', '.info time'
                        ];
                        
                        for (const selector of possibleDateSelectors) {
                            try {
                                const dateElem = firstItem.querySelector(selector);
                                if (dateElem && dateElem.textContent.trim()) {
                                    foundSelectors.date.push({
                                        selector: selector,
                                        text: dateElem.textContent.trim()
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                        
                        // 查找摘要
                        const possibleSummarySelectors = [
                            'p', '.summary', '.excerpt', '.description', '.desc',
                            '[class*="summary"]', '[class*="excerpt"]', '[class*="desc"]'
                        ];
                        
                        for (const selector of possibleSummarySelectors) {
                            try {
                                const summaryElem = firstItem.querySelector(selector);
                                if (summaryElem && summaryElem.textContent.trim()) {
                                    // 排除可能是标题或日期的元素
                                    if (foundSelectors.title.some(title => title.text === summaryElem.textContent.trim()) ||
                                        foundSelectors.date.some(date => date.text === summaryElem.textContent.trim())) {
                                        continue;
                                    }
                                    
                                    foundSelectors.summary.push({
                                        selector: selector,
                                        text: summaryElem.textContent.trim().substring(0, 100)
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                    }
                    
                    // 针对所有结构 - 查找内容（通常在详情页，但有时会在列表页面）
                    const possibleContentSelectors = [
                        '.content', '.article-body', '.article-content', '.text', '.body',
                        '[class*="content"]', '[class*="body"]', 'dd > p'
                    ];
                    
                    for (const selector of possibleContentSelectors) {
                        try {
                            const contentElem = firstItem.querySelector(selector);
                            if (contentElem && contentElem.textContent.trim()) {
                                // 排除可能是标题、摘要或日期的元素
                                if (foundSelectors.title.some(title => title.text === contentElem.textContent.trim()) ||
                                    foundSelectors.summary.some(summary => summary.text === contentElem.textContent.trim()) ||
                                    foundSelectors.date.some(date => date.text === contentElem.textContent.trim())) {
                                    continue;
                                }
                                
                                foundSelectors.content.push({
                                    selector: selector,
                                    text: contentElem.textContent.trim().substring(0, 100)
                                });
                            }
                        } catch (e) {
                            // 忽略无效选择器
                        }
                    }
                }
                
                // 在表单中设置找到的选择器
                if (foundSelectors.item.length > 0) {
                    document.getElementById('itemSelector').value = foundSelectors.item[0].selector;
                }
                
                if (foundSelectors.title.length > 0) {
                    document.getElementById('titleSelector').value = foundSelectors.title[0].selector;
                }
                
                if (foundSelectors.link.length > 0) {
                    document.getElementById('linkSelector').value = foundSelectors.link[0].selector;
                }
                
                if (foundSelectors.date.length > 0) {
                    // 如果日期在父元素，需要特殊处理
                    const dateSelector = foundSelectors.date[0];
                    if (dateSelector.isParent) {
                        document.getElementById('dateSelector').value = dateSelector.selector;
                    } else {
                        document.getElementById('dateSelector').value = foundSelectors.date[0].selector;
                    }
                }
                
                if (foundSelectors.summary.length > 0) {
                    document.getElementById('summarySelector').value = foundSelectors.summary[0].selector;
                }
                
                if (foundSelectors.content.length > 0) {
                    document.getElementById('contentSelector').value = foundSelectors.content[0].selector;
                }
                
                // 显示分析结果
                hideLoader();
                
                // 构建结果消息
                let resultMessage = '<div class="alert alert-success"><p><strong>HTML分析完成！</strong></p>';
                resultMessage += `<p>找到 ${maxItems} 个可能的新闻条目。</p>`;
                
                if (foundSelectors.item.length === 0) {
                    resultMessage += '<p class="text-warning">未能找到合适的条目选择器，请手动填写。</p>';
                }
                
                if (foundSelectors.title.length === 0) {
                    resultMessage += '<p class="text-warning">未能找到合适的标题选择器，请手动填写。</p>';
                }
                
                resultMessage += '</div>';
                
                // 如果有多个选择器选项，提供选择
                if (foundSelectors.item.length > 1 || foundSelectors.title.length > 1 || 
                    foundSelectors.link.length > 1 || foundSelectors.summary.length > 1) {
                    resultMessage += '<div class="mb-4"><h5>其他可能的选择器：</h5>';
                    
                    if (foundSelectors.item.length > 1) {
                        resultMessage += '<div class="mb-3"><h6>条目选择器：</h6><ul class="list-group">';
                        foundSelectors.item.forEach((item, index) => {
                            resultMessage += `<li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${item.selector}</span>
                                <span class="badge bg-primary">${item.count} 个条目</span>
                                <button class="btn btn-sm btn-outline-primary use-selector" 
                                    data-target="itemSelector" data-value="${item.selector}">使用</button>
                            </li>`;
                        });
                        resultMessage += '</ul></div>';
                    }
                    
                    if (foundSelectors.title.length > 1) {
                        resultMessage += '<div class="mb-3"><h6>标题选择器：</h6><ul class="list-group">';
                        foundSelectors.title.forEach((item, index) => {
                            resultMessage += `<li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${item.selector}</span>
                                <small class="text-muted">${item.text}</small>
                                <button class="btn btn-sm btn-outline-primary use-selector" 
                                    data-target="titleSelector" data-value="${item.selector}">使用</button>
                            </li>`;
                        });
                        resultMessage += '</ul></div>';
                    }
                    
                    if (foundSelectors.link.length > 1) {
                        resultMessage += '<div class="mb-3"><h6>链接选择器：</h6><ul class="list-group">';
                        foundSelectors.link.forEach((item, index) => {
                            resultMessage += `<li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${item.selector}</span>
                                <small class="text-muted">${item.href}</small>
                                <button class="btn btn-sm btn-outline-primary use-selector" 
                                    data-target="linkSelector" data-value="${item.selector}">使用</button>
                            </li>`;
                        });
                        resultMessage += '</ul></div>';
                    }
                    
                    if (foundSelectors.date.length > 1) {
                        resultMessage += '<div class="mb-3"><h6>日期选择器：</h6><ul class="list-group">';
                        foundSelectors.date.forEach((item, index) => {
                            resultMessage += `<li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${item.selector}</span>
                                <small class="text-muted">${item.text}</small>
                                <button class="btn btn-sm btn-outline-primary use-selector" 
                                    data-target="dateSelector" data-value="${item.selector}">使用</button>
                            </li>`;
                        });
                        resultMessage += '</ul></div>';
                    }
                    
                    if (foundSelectors.summary.length > 1) {
                        resultMessage += '<div class="mb-3"><h6>摘要选择器：</h6><ul class="list-group">';
                        foundSelectors.summary.forEach((item, index) => {
                            resultMessage += `<li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${item.selector}</span>
                                <small class="text-muted">${item.text}</small>
                                <button class="btn btn-sm btn-outline-primary use-selector" 
                                    data-target="summarySelector" data-value="${item.selector}">使用</button>
                            </li>`;
                        });
                        resultMessage += '</ul></div>';
                    }
                    
                    resultMessage += '</div>';
                }
                
                document.getElementById('resultModalTitle').textContent = 'HTML分析结果';
                document.getElementById('resultModalBody').innerHTML = resultMessage;
                
                // 显示对话框前移除所有已有的使用按钮事件，防止重复绑定
                document.querySelectorAll('.use-selector').forEach(button => {
                    button.removeEventListener('click', selectorButtonClickHandler);
                });
                
                // 确保模态框完全显示后再绑定事件
                const resultModal = new bootstrap.Modal(document.getElementById('resultModal'));
                
                // 改用模态框事件监听，确保在显示后绑定
                document.getElementById('resultModal').addEventListener('shown.bs.modal', function() {
                    // 为所有"使用"按钮添加点击事件
                    document.querySelectorAll('.use-selector').forEach(button => {
                        // 移除可能存在的旧事件监听器
                        button.removeEventListener('click', selectorButtonClickHandler);
                        // 添加新的事件监听器
                        button.addEventListener('click', selectorButtonClickHandler);
                    });
                }, { once: true }); // 只监听一次事件，避免重复绑定
                
                // 显示模态框
                resultModal.show();
            } catch (error) {
                hideLoader();
                console.error('HTML分析出错:', error);
                alert('分析HTML时出错: ' + error.message);
            }
        }
        
        // 辅助函数：判断字符串是否可能是日期
        function isLikelyDateString(text) {
            // 检查是否包含日期格式
            return /\d{1,4}[-\/\.年]\d{1,2}[-\/\.月]\d{1,2}/.test(text) || // 年-月-日格式
                  /\d{1,2}[-\/\.]\d{1,2}[-\/\.]\d{2,4}/.test(text) || // 日-月-年格式
                  /\d{1,2}:\d{1,2}/.test(text) || // 时:分格式
                  /\d{4}年\d{1,2}月\d{1,2}日/.test(text); // 中文日期格式
        }
        
        // 定义选择器按钮的点击处理函数，避免匿名函数重复定义
        function selectorButtonClickHandler() {
            const targetId = this.getAttribute('data-target');
            const value = this.getAttribute('data-value');
            document.getElementById(targetId).value = value;
            // 可选：在使用后高亮显示按钮，提供视觉反馈
            this.classList.remove('btn-outline-primary');
            this.classList.add('btn-primary');
            this.textContent = '已使用';
        }
        
        // 高级HTML格式化函数
        function formatHtmlContent(html) {
            // 移除多余的空白和空行
            html = html.trim();
            
            // 使用正则表达式进行初步处理
            // 将多个空格替换为单个空格
            html = html.replace(/\s{2,}/g, ' ');
            
            // 处理自闭合标签
            html = html.replace(/<([^\/][^>]*?)\/>/g, '<$1></$1>');
            
            // 防止一些特殊情况下标签之间的文本被错误地缩进
            html = html.replace(/>\s+</g, '> <');
            
            // 特别处理常见的新闻结构
            // 特殊处理liveNews、newsDl等特定类
            const specialClasses = ['liveNews', 'newsDl', 'newsBox', 'newsList', 'clearfix'];
            for (const className of specialClasses) {
                // 添加注释标记重要结构
                html = html.replace(new RegExp(`class=(["\'])[^"\']*${className}[^"\']*\\1`, 'gi'), 
                                  (match) => `${match} data-important="true"`);
            }
            
            let formatted = '';
            let indent = '';
            
            // 处理每个字符
            const len = html.length;
            let inTag = false;
            let inTagName = false;
            let tagName = '';
            let currentTagContent = '';
            let inComment = false;
            let inQuote = false; 
            let quoteChar = '';
            let lastNonSpaceChar = '';
            
            for (let i = 0; i < len; i++) {
                const char = html.charAt(i);
                const nextChar = i < len - 1 ? html.charAt(i + 1) : '';
                const prevChar = i > 0 ? html.charAt(i - 1) : '';
                
                // 更新最后一个非空格字符
                if (char !== ' ' && char !== '\n' && char !== '\t') {
                    lastNonSpaceChar = char;
                }
                
                // 处理注释
                if (char === '<' && nextChar === '!' && i + 3 < len && html.charAt(i + 2) === '-' && html.charAt(i + 3) === '-') {
                    inComment = true;
                    formatted += '\n' + indent + '<!-- ';
                    i += 3; // 跳过 "!--"
                    continue;
                }
                
                if (inComment) {
                    if (char === '-' && nextChar === '-' && i + 2 < len && html.charAt(i + 2) === '>') {
                        inComment = false;
                        formatted += ' -->';
                        i += 2; // 跳过 "->"
                        continue;
                    }
                    formatted += char;
                    continue;
                }
                
                // 处理引号
                if (inTag && (char === '"' || char === "'") && prevChar !== '\\') {
                    if (!inQuote) {
                        inQuote = true;
                        quoteChar = char;
                    } else if (char === quoteChar) {
                        inQuote = false;
                    }
                    formatted += char;
                    continue;
                }
                
                // 在引号内保持原样
                if (inQuote) {
                    formatted += char;
                    continue;
                }
                
                // 处理标签开始
                if (char === '<' && !inTag) {
                    inTag = true;
                    inTagName = true;
                    tagName = '';
                    currentTagContent = '<';
                    
                    // 处理结束标签缩进
                    if (nextChar === '/') {
                        if (indent.length > 0) {
                            indent = indent.substring(2);
                        }
                        formatted += '\n' + indent;
                    } else {
                        // 为非内联元素添加换行和缩进
                        // 特殊处理dl/dd/dt标签，使其对齐更美观
                        const nextTag = getTagName(html.substring(i));
                        const isSpecial = nextTag === 'dl' || nextTag === 'dt' || nextTag === 'dd';
                        
                        if ((isSpecial || !isInlineElement(nextTag)) && lastNonSpaceChar !== '>') {
                            formatted += '\n' + indent;
                        }
                    }
                    
                    continue;
                }
                
                // 收集标签名称
                if (inTag && inTagName && char !== ' ' && char !== '>' && char !== '/') {
                    tagName += char.toLowerCase();
                    currentTagContent += char;
                } else if (inTagName && inTag) {
                    inTagName = false;
                    currentTagContent += char;
                } else if (inTag) {
                    currentTagContent += char;
                }
                
                // 处理标签结束
                if (inTag && char === '>') {
                    inTag = false;
                    formatted += currentTagContent;
                    
                    // 特殊处理data-important属性
                    if (currentTagContent.includes('data-important="true"')) {
                        // 在重要结构前后添加空行
                        if (!currentTagContent.startsWith('</')) {
                            formatted += '\n' + indent + '<!-- 重要结构: ' + tagName + ' -->';
                        }
                    }
                    
                    // 为非内联元素和非自闭合标签添加缩进
                    if (!currentTagContent.includes('</') && !currentTagContent.includes('/>') && 
                        !isInlineElement(tagName) && nextChar !== '<') {
                        indent += '  ';
                    }
                    
                    continue;
                }
                
                // 只有在不在标签内时才添加字符，因为我们已经在处理标签结束时添加了完整的标签内容
                if (!inTag) {
                    formatted += char;
                }
            }
            
            // 最终清理
            // 删除首行的空行
            formatted = formatted.replace(/^\s*\n/, '');
            // 合并多个空行
            formatted = formatted.replace(/\n\s*\n/g, '\n');
            // 移除辅助属性
            formatted = formatted.replace(/data-important="true"/g, '');
            
            return formatted;
        }
        
        // 辅助函数：检查是否为内联元素
        function isInlineElement(tagName) {
            const inlineElements = ['a', 'abbr', 'acronym', 'b', 'bdo', 'big', 'br', 'button', 'cite', 'code', 
                                   'dfn', 'em', 'i', 'img', 'input', 'kbd', 'label', 'map', 'object', 'output', 
                                   'q', 'samp', 'script', 'select', 'small', 'span', 'strong', 'sub', 'sup', 
                                   'textarea', 'time', 'tt', 'var'];
            
            return inlineElements.includes(tagName);
        }
        
        // 辅助函数：从标签字符串中提取标签名
        function getTagName(tagString) {
            const match = tagString.match(/<\/?([a-z][a-z0-9]*)/i);
            return match ? match[1].toLowerCase() : '';
        }
        
        // 添加HTML格式化函数
        function formatHtml() {
            showLoader('格式化HTML中...');
            
            try {
                const htmlContent = htmlEditor.getValue();
                if (!htmlContent || htmlContent.trim().length === 0) {
                    showToast('警告', '请先粘贴HTML内容', 'warning');
                    hideLoader();
                    return;
                }
                
                // 创建一个格式化后的HTML字符串
                let formattedHtml = '';
                
                try {
                    // 尝试使用更高级的格式化方法
                    formattedHtml = formatHtmlContent(htmlContent);
                } catch (err) {
                    console.error('高级格式化失败，回退到基础格式化', err);
                    
                    // 如果高级格式化失败，回退到基础格式化
                    try {
                        // 使用DOMParser解析HTML
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(htmlContent, 'text/html');
                        
                        // 使用XMLSerializer重新序列化
                        const serializer = new XMLSerializer();
                        formattedHtml = serializer.serializeToString(doc);
                        
                        // 简单清理
                        formattedHtml = formattedHtml.replace(/><(?!\/)/g, '>\n<');
                    } catch (basicErr) {
                        // 如果两种方法都失败，保持原始内容
                        console.error('基础格式化失败', basicErr);
                        formattedHtml = htmlContent;
                        
                        showToast('错误', '格式化失败，HTML结构可能有问题', 'danger');
                        hideLoader();
                        return;
                    }
                }
                
                // 更新编辑器内容
                htmlEditor.setValue(formattedHtml);
                
                // 通知用户格式化完成
                hideLoader();
                showToast('成功', 'HTML已成功格式化！', 'success');
            } catch (error) {
                hideLoader();
                console.error('HTML格式化出错:', error);
                showToast('错误', '格式化HTML时出错: ' + error.message, 'danger');
            }
        }
        
        // 显示Toast消息
        function showToast(title, message, type = 'info') {
            // 创建toast容器，如果不存在
            let toastContainer = document.getElementById('toastContainer');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toastContainer';
                toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
                document.body.appendChild(toastContainer);
            }
            
            // 创建随机ID
            const toastId = 'toast-' + Math.random().toString(36).substr(2, 9);
            
            // 创建toast元素
            const toastHtml = `
                <div class="toast" id="${toastId}" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header bg-${type} text-white">
                        <strong class="me-auto">${title}</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `;
            
            // 添加toast到容器
            toastContainer.insertAdjacentHTML('beforeend', toastHtml);
            
            // 初始化并显示toast
            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, {
                delay: 3000,
                autohide: true
            });
            
            toast.show();
            
            // 自动移除toast元素
            toastElement.addEventListener('hidden.bs.toast', function() {
                toastElement.remove();
            });
        }
        
        // 格式化并在模态框中显示HTML
        function formatAndDisplayHtml() {
            showLoader('格式化并准备HTML可视化...');
            
            try {
                const htmlContent = htmlEditor.getValue();
                if (!htmlContent || htmlContent.trim().length === 0) {
                    showToast('警告', '请先粘贴HTML内容', 'warning');
                    hideLoader();
                    return;
                }
                
                // 首先格式化HTML
                let formattedHtml = formatHtmlContent(htmlContent);
                
                // 更新编辑器的值
                htmlEditor.setValue(formattedHtml);
                
                // 准备可视化效果
                const visualizedHtml = visualizeHtml(formattedHtml);
                
                // 在模态框中显示可视化HTML
                document.getElementById('htmlVisualization').innerHTML = visualizedHtml;
                
                // 显示模态框
                new bootstrap.Modal(document.getElementById('htmlDisplayModal')).show();
                
                hideLoader();
            } catch (error) {
                hideLoader();
                console.error('处理HTML出错:', error);
                showToast('错误', '处理HTML时出错: ' + error.message, 'danger');
            }
        }
        
        // 创建HTML可视化效果
        function visualizeHtml(html) {
            // 基本的语法高亮和格式化
            let visualized = html
                // 添加行号
                .split('\n')
                .map((line, index) => {
                    // 特殊处理特定元素的样式
                    let processedLine = escapeHtml(line)
                        // 标签
                        .replace(/(&lt;\/?)([a-zA-Z][a-zA-Z0-9]*)/g, '<span class="tag-name">$2</span>')
                        // 属性名
                        .replace(/([a-zA-Z][a-zA-Z0-9-_]*)=(&quot;|&#39;)/g, '<span class="attribute-name">$1</span>=<span class="attribute-value">$2')
                        // 属性值
                        .replace(/(&quot;|&#39;)/g, '<span class="attribute-value">$1</span>')
                        // 注释
                        .replace(/&lt;!--(.*)--&gt;/g, '<span class="html-comment">&lt;!--$1--&gt;</span>');
                    
                    // 突出显示特定的结构
                    if (processedLine.includes('liveNews') || processedLine.includes('newsDl') || 
                        processedLine.includes('clearfix') || processedLine.includes('重要结构')) {
                        return `<div class="d-flex hover-highlight" style="background-color: rgba(255, 240, 200, 0.5);">
                                    <div class="me-3 text-muted" style="min-width: 40px; text-align: right;">${index + 1}</div>
                                    <div style="font-weight: bold;">${processedLine}</div>
                                </div>`;
                    }
                    
                    // 为dt和dd标签添加视觉辅助
                    if (processedLine.includes('<span class="tag-name">dt</span>') || 
                        processedLine.includes('<span class="tag-name">dd</span>')) {
                        return `<div class="d-flex hover-highlight" style="background-color: rgba(200, 230, 255, 0.3);">
                                    <div class="me-3 text-muted" style="min-width: 40px; text-align: right;">${index + 1}</div>
                                    <div>${processedLine}</div>
                                </div>`;
                    }
                    
                    // 常规行
                    return `<div class="d-flex hover-highlight">
                                <div class="me-3 text-muted" style="min-width: 40px; text-align: right;">${index + 1}</div>
                                <div>${processedLine}</div>
                            </div>`;
                })
                .join('');
            
            return visualized;
        }
        
        // 辅助函数：转义HTML特殊字符
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        // 添加API健康检查函数
        function checkApiHealth() {
            // 创建模态框
            const modal = document.createElement('div');
            modal.className = 'modal fade';
            modal.id = 'apiHealthModal';
            modal.setAttribute('tabindex', '-1');
            modal.setAttribute('aria-hidden', 'true');
            
            modal.innerHTML = `
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">API健康检查</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="alert alert-info">
                                <p>正在检查API端点可用性...</p>
                                <div class="progress">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%"></div>
                                </div>
                            </div>
                            <div id="apiHealthResults"></div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                            <button type="button" class="btn btn-primary" id="rerunApiCheck">重新检查</button>
                        </div>
                    </div>
                </div>
            `;
            
            // 添加到页面
            document.body.appendChild(modal);
            
            // 显示模态框
            const modalInstance = new bootstrap.Modal(document.getElementById('apiHealthModal'));
            modalInstance.show();
            
            // 添加重新检查按钮事件
            document.getElementById('rerunApiCheck').addEventListener('click', function() {
                document.querySelector('#apiHealthModal .modal-body').innerHTML = `
                    <div class="alert alert-info">
                        <p>正在检查API端点可用性...</p>
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%"></div>
                        </div>
                    </div>
                    <div id="apiHealthResults"></div>
                `;
                runApiChecks();
            });
            
            // 执行API检查
            runApiChecks();
        }
        
        function runApiChecks() {
            const resultsContainer = document.getElementById('apiHealthResults');
            
            // 要测试的端点列表
            const endpoints = [
                { name: 'API信息', url: '/api-info', method: 'GET' },
                { name: '源类型列表', url: '/api/source-test/source-types', method: 'GET' },
                { name: '测试源示例', url: '/api/source-test/test-source/test', method: 'GET' },
                { name: '创建源端点', url: '/api/source-test/create-custom-source', method: 'POST', body: {}, skipContent: true }
            ];
            
            // 创建结果表格
            resultsContainer.innerHTML = `
                <h5>API端点状态:</h5>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>端点名称</th>
                            <th>URL</th>
                            <th>状态</th>
                            <th>响应时间</th>
                            <th>操作</th>
                        </tr>
                    </thead>
                    <tbody id="apiCheckResults">
                        ${endpoints.map((endpoint, index) => `
                            <tr id="apiCheck-${index}">
                                <td>${endpoint.name}</td>
                                <td><code>${endpoint.url}</code></td>
                                <td><span class="badge bg-secondary">待检查</span></td>
                                <td>-</td>
                                <td><button class="btn btn-sm btn-primary" disabled>详情</button></td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
                <div id="apiCheckDetails" class="mt-3"></div>
            `;
            
            // 逐个检查端点
            endpoints.forEach((endpoint, index) => {
                setTimeout(() => {
                    checkEndpoint(endpoint, index);
                }, index * 500); // 错开请求时间
            });
        }
        
        function checkEndpoint(endpoint, index) {
            const row = document.getElementById(`apiCheck-${index}`);
            const cells = row.querySelectorAll('td');
            const startTime = performance.now();
            
            // 更新状态为检查中
            cells[2].innerHTML = '<span class="badge bg-info">检查中...</span>';
            
            const options = {
                method: endpoint.method
            };
            
            if (endpoint.method === 'POST') {
                options.headers = {
                    'Content-Type': 'application/json'
                };
                options.body = JSON.stringify(endpoint.body || {});
            }
            
            fetch(endpoint.url, options)
                .then(response => {
                    const endTime = performance.now();
                    const responseTime = (endTime - startTime).toFixed(2);
                    cells[3].textContent = `${responseTime} ms`;
                    
                    // 更新状态
                    if (response.ok) {
                        cells[2].innerHTML = '<span class="badge bg-success">可用</span>';
                        cells[4].querySelector('button').disabled = false;
                        
                        // 添加详情按钮事件
                        cells[4].querySelector('button').addEventListener('click', () => {
                            showEndpointDetails(endpoint, response, responseTime);
                        });
                        
                        return response.text();
                    } else {
                        cells[2].innerHTML = `<span class="badge bg-danger">错误 ${response.status}</span>`;
                        cells[4].querySelector('button').disabled = false;
                        
                        // 添加详情按钮事件
                        cells[4].querySelector('button').addEventListener('click', () => {
                            showEndpointDetails(endpoint, response, responseTime);
                        });
                        
                        return response.text();
                    }
                })
                .catch(error => {
                    const endTime = performance.now();
                    const responseTime = (endTime - startTime).toFixed(2);
                    cells[3].textContent = `${responseTime} ms`;
                    
                    // 更新状态
                    cells[2].innerHTML = '<span class="badge bg-danger">无法连接</span>';
                    cells[4].querySelector('button').disabled = false;
                    
                    // 添加详情按钮事件
                    cells[4].querySelector('button').addEventListener('click', () => {
                        document.getElementById('apiCheckDetails').innerHTML = `
                            <div class="alert alert-danger">
                                <h5>错误详情: ${endpoint.url}</h5>
                                <p>${error.message}</p>
                            </div>
                        `;
                    });
                });
        }
        
        function showEndpointDetails(endpoint, response, responseTime) {
            const detailsContainer = document.getElementById('apiCheckDetails');
            
            // 将响应克隆一份，因为response.text()只能消费一次
            response.clone().text().then(text => {
                let formattedContent = '<pre>无内容</pre>';
                
                try {
                    // 尝试解析为JSON
                    if (text.trim() && !endpoint.skipContent) {
                        const json = JSON.parse(text);
                        formattedContent = `<pre class="bg-dark text-light p-2">${JSON.stringify(json, null, 2)}</pre>`;
                    } else if (text.trim() && !endpoint.skipContent) {
                        formattedContent = `<pre class="bg-dark text-light p-2">${text}</pre>`;
                    }
                } catch (e) {
                    // 如果不是JSON，则显示原始文本
                    if (text.trim() && !endpoint.skipContent) {
                        formattedContent = `<pre class="bg-dark text-light p-2">${text}</pre>`;
                    }
                }
                
                // 获取响应头
                const headers = Array.from(response.headers.entries())
                    .map(([key, value]) => `<tr><td><strong>${key}</strong></td><td>${value}</td></tr>`)
                    .join('');
                
                detailsContainer.innerHTML = `
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">端点详情: ${endpoint.url}</h5>
                            <span class="badge ${response.ok ? 'bg-success' : 'bg-danger'}">
                                ${response.status} ${response.statusText}
                            </span>
                        </div>
                        <div class="card-body">
                            <p><strong>请求方法:</strong> ${endpoint.method}</p>
                            <p><strong>响应时间:</strong> ${responseTime} ms</p>
                            
                            <h6>响应头:</h6>
                            <div class="table-responsive" style="max-height: 200px; overflow-y: auto;">
                                <table class="table table-sm table-striped">
                                    <tbody>
                                        ${headers}
                                    </tbody>
                                </table>
                            </div>
                            
                            ${!endpoint.skipContent ? `
                                <h6 class="mt-3">响应内容:</h6>
                                <div style="max-height: 300px; overflow-y: auto;">
                                    ${formattedContent}
                                </div>
                            ` : '<p>响应内容已跳过</p>'}
                        </div>
                    </div>
                `;
            });
        }
    </script>

    <!-- 添加页面函数 -->
    <script>
        /**
         * 设置选择器值
         * @param {string} selectorType - 选择器类型（item, title, link等）
         * @param {string} selectorValue - 选择器值
         */
        function setSelector(selectorType, selectorValue) {
            if (!selectorType || !selectorValue) return;
            
            // 查找对应的选择器输入框
            const inputId = `selector${selectorType.charAt(0).toUpperCase() + selectorType.slice(1)}`;
            const inputElement = document.getElementById(inputId);
            
            if (inputElement) {
                inputElement.value = selectorValue;
                inputElement.classList.add('is-valid');
                
                // 提示用户已设置选择器
                const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                document.getElementById('toastMessage').textContent = `已设置${selectorType}选择器: ${selectorValue}`;
                toast.show();
                
                // 关闭模态框
                if (bootstrap.Modal.getInstance(document.getElementById('resultModal'))) {
                    bootstrap.Modal.getInstance(document.getElementById('resultModal')).hide();
                }
            }
        }
        
        /**
         * 处理认证错误，显示认证模态框
         * @param {Error} error - 错误对象
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.detail || '登录失败');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    // 保存令牌
                    localStorage.setItem('auth_token', data.access_token);
                    
                    // 显示成功消息
                    const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                    document.getElementById('toastMessage').textContent = '登录成功！';
                    toast.show();
                    
                    // 关闭模态框
                    bootstrap.Modal.getInstance(document.getElementById('authModal')).hide();
                    
                    // 如果有回调函数，则执行
                    if (window.authCallback && typeof window.authCallback === 'function') {
                        window.authCallback();
                        window.authCallback = null;
                    }
                })
                .catch(error => {
                    alert('登录失败: ' + error.message);
                });
            });
            
            // API密钥表单提交
            document.getElementById('apiKeyForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const apiKey = document.getElementById('apiKey').value;
                
                // 保存API密钥
                localStorage.setItem('api_key', apiKey);
                
                // 显示成功消息
                const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                document.getElementById('toastMessage').textContent = 'API密钥已保存！';
                toast.show();
                </div>

<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HeatLink 新闻源管理器</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
    <!-- CodeMirror CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/monokai.min.css">
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: #f8f9fa;
            padding-bottom: 50px;
        }
        .navbar {
            margin-bottom: 20px;
        }
        .card {
            margin-bottom: 20px;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        .loading {
            display: inline-block;
            width: 25px;
            height: 25px;
            border: 3px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top-color: #0d6efd;
            animation: spin 1s ease-in-out infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        .CodeMirror {
            height: 300px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        #globalLoader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            z-index: 1051;
        }
        .source-list-item {
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .source-list-item:hover {
            background-color: #f8f9fa;
        }
        .source-list-item.active {
            background-color: #e9ecef;
        }
        .nav-tabs {
            margin-bottom: 15px;
        }
        .alert {
            margin-bottom: 10px;
        }
        /* HTML Visualization Styles */
        .html-visualization-container {
            font-family: monospace;
            overflow-x: auto;
            background-color: #f8f9fa;
            border-radius: 0;
            padding: 0;
        }
        #htmlVisualization {
            white-space: pre-wrap;
            font-size: 14px;
            line-height: 1.5;
        }
        .tag-name {
            color: #0000ff;
            font-weight: bold;
        }
        .attribute-name {
            color: #008000;
        }
        .attribute-value {
            color: #dd0000;
        }
        .html-comment {
            color: #808080;
            font-style: italic;
        }
        .text-content {
            color: #000000;
        }
        .nested-level {
            border-left: 1px dotted #ccc;
            margin-left: 20px;
            padding-left: 5px;
        }
        .hover-highlight:hover {
            background-color: rgba(0, 123, 255, 0.1);
        }
    </style>
</head>
<body>
    <!-- Global Loader -->
    <div id="globalLoader">
        <div class="loading"></div>
        <p class="mt-3" id="loaderMessage">加载中...</p>
    </div>

    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="#">HeatLink 新闻源管理器</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="#" id="navCreate">创建新源</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="navManage">管理源</a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/static/docs_index.html">
                            <i class="bi bi-house-door"></i> 返回文档中心
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container">
        <!-- Main content area -->
        <div id="createSourceSection">
            <h2 class="mb-3">创建新闻源适配器</h2>
            <div class="alert alert-info">
                <p><strong>提示：</strong>这个工具将基于提供的URL和代码样本生成自定义新闻源适配器。</p>
            </div>
            
            <!-- Create Source Form -->
            <div class="card">
                <div class="card-body">
                    <form id="createSourceForm">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="sourceId" class="form-label">源ID <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="sourceId" required 
                                       placeholder="例如：news-website">
                                <div class="form-text">此源的唯一标识符，使用小写字母和连字符。会自动添加"custom-"前缀</div>
                            </div>
                            <div class="col-md-6">
                                <label for="sourceName" class="form-label">源名称 <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="sourceName" required 
                                       placeholder="例如：自定义新闻门户">
                                <div class="form-text">此源的显示名称</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="sourceUrl" class="form-label">源URL <span class="text-danger">*</span></label>
                                <input type="url" class="form-control" id="sourceUrl" required 
                                       placeholder="https://example.com/news">
                                <div class="form-text">要抓取的新闻页面URL</div>
                            </div>
                            <div class="col-md-6">
                                <label for="sourceCategory" class="form-label">类别</label>
                                <select class="form-select" id="sourceCategory">
                                    <option value="news">新闻</option>
                                    <option value="technology">科技</option>
                                    <option value="finance">财经</option>
                                    <option value="sports">体育</option>
                                    <option value="entertainment">娱乐</option>
                                    <option value="science">科学</option>
                                    <option value="health">健康</option>
                                    <option value="politics">政治</option>
                                    <option value="business">商业</option>
                                    <option value="other">其他</option>
                                </select>
                                <div class="form-text">新闻源的类别</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="sourceCountry" class="form-label">国家</label>
                                <input type="text" class="form-control" id="sourceCountry" 
                                       placeholder="例如：US, CN, JP" value="CN">
                                <div class="form-text">国家代码 (ISO 3166-1 alpha-2)</div>
                            </div>
                            <div class="col-md-6">
                                <label for="sourceLanguage" class="form-label">语言</label>
                                <input type="text" class="form-control" id="sourceLanguage" 
                                       placeholder="例如：en, zh-CN, ja" value="zh-CN">
                                <div class="form-text">语言代码 (ISO 639-1)</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="updateInterval" class="form-label">更新间隔 (秒)</label>
                                <input type="number" class="form-control" id="updateInterval" 
                                       value="1800" min="300" max="86400">
                                <div class="form-text">多久获取一次新数据 (最小: 5分钟)</div>
                            </div>
                            <div class="col-md-6">
                                <label for="cacheTtl" class="form-label">缓存TTL (秒)</label>
                                <input type="number" class="form-control" id="cacheTtl" 
                                       value="900" min="60" max="43200">
                                <div class="form-text">数据缓存多长时间 (最小: 1分钟)</div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="htmlExample" class="form-label">HTML示例 <span class="text-danger">*</span></label>
                            <div id="htmlEditor" style="height: 300px; border: 1px solid #ddd;"></div>
                            <div class="form-text">粘贴包含新闻条目的新闻页面HTML示例</div>
                            <div class="mt-2">
                                <button type="button" id="formatHtmlBtn" class="btn btn-secondary me-2">
                                    <i class="bi bi-code"></i> 格式化HTML
                                </button>
                                <button type="button" id="formatAndDisplayBtn" class="btn btn-secondary me-2">
                                    <i class="bi bi-eye"></i> 格式化并显示
                                </button>
                                <button type="button" id="analyzeHtmlBtn" class="btn btn-info">
                                    <i class="bi bi-magic"></i> 分析HTML结构并推荐选择器
                                </button>
                                <button type="button" id="copyVisualizedHtmlBtn" class="btn btn-outline-secondary ms-2" style="display:none">
                                    <i class="bi bi-clipboard"></i> 复制格式化HTML
                                </button>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="itemSelector" class="form-label">条目选择器 <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="itemSelector" required 
                                       placeholder="例如：div.news-item, article.post">
                                <div class="form-text">用于在HTML中找到新闻条目的CSS选择器</div>
                            </div>
                            <div class="col-md-6">
                                <label for="titleSelector" class="form-label">标题选择器 <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="titleSelector" required 
                                       placeholder="例如：h3.title, .headline">
                                <div class="form-text">用于在每个条目中找到标题的CSS选择器</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="linkSelector" class="form-label">链接选择器</label>
                                <input type="text" class="form-control" id="linkSelector" 
                                       placeholder="例如：a, .link">
                                <div class="form-text">用于在每个条目中找到链接的CSS选择器</div>
                            </div>
                            <div class="col-md-6">
                                <label for="dateSelector" class="form-label">日期选择器</label>
                                <input type="text" class="form-control" id="dateSelector" 
                                       placeholder="例如：.date, time">
                                <div class="form-text">用于在每个条目中找到日期的CSS选择器</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="summarySelector" class="form-label">摘要选择器</label>
                                <input type="text" class="form-control" id="summarySelector" 
                                       placeholder="例如：.summary, p.excerpt">
                                <div class="form-text">用于在每个条目中找到摘要的CSS选择器</div>
                            </div>
                            <div class="col-md-6">
                                <label for="contentSelector" class="form-label">内容选择器</label>
                                <input type="text" class="form-control" id="contentSelector" 
                                       placeholder="例如：.content, .article-body">
                                <div class="form-text">用于在每个条目中找到完整内容的CSS选择器（如果有）</div>
                            </div>
                        </div>
                        
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="useSelenium">
                            <label class="form-check-label" for="useSelenium">使用Selenium处理JavaScript页面</label>
                            <div class="form-text">如果页面需要JavaScript才能加载内容，请启用此选项</div>
                        </div>
                        
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="autoRegister" checked>
                            <label class="form-check-label" for="autoRegister">自动注册源</label>
                            <div class="form-text">在数据库中注册此源并使其可用</div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <button type="button" id="previewSourceBtn" class="btn btn-secondary w-100">预览源代码</button>
                            </div>
                            <div class="col-md-6">
                                <button type="submit" id="createSourceBtn" class="btn btn-primary w-100">创建源适配器</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            
            <!-- Preview Modal -->
            <div class="modal fade" id="previewModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">源适配器预览</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div id="previewEditor"></div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                            <button type="button" class="btn btn-primary" id="copyPreviewBtn">复制代码</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Result Modal -->
            <div class="modal fade" id="resultModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="resultModalTitle">源已创建</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body" id="resultModalBody">
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                            <button type="button" class="btn btn-primary" id="testNewSourceBtn">测试源</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="manageSourcesSection" style="display: none;">
            <h2 class="mb-3">管理新闻源</h2>
            
            <!-- Source Management Content -->
            <div class="row">
                <div class="col-md-4">
                    <div class="card mb-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">源列表</h5>
                            <button class="btn btn-sm btn-outline-primary" id="refreshSourcesBtn">
                                <i class="bi bi-arrow-clockwise"></i>
                            </button>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <input type="text" class="form-control" id="sourceSearchInput" placeholder="搜索源...">
                            </div>
                            <div class="list-group" id="sourceListContainer">
                                <div class="text-center py-3">
                                    <div class="loading"></div>
                                    <p class="mt-2">加载源中...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">操作</h5>
                        </div>
                        <div class="card-body">
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-primary" id="testSelectedSourceBtn" disabled>
                                    <i class="bi bi-play-fill"></i> 测试源
                                </button>
                                <button class="btn btn-outline-success" id="activateSourceBtn" disabled>
                                    <i class="bi bi-check-circle"></i> 激活
                                </button>
                                <button class="btn btn-outline-warning" id="deactivateSourceBtn" disabled>
                                    <i class="bi bi-pause-circle"></i> 停用
                                </button>
                                <button class="btn btn-outline-danger" id="deleteSourceBtn" disabled>
                                    <i class="bi bi-trash"></i> 删除
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-header">
                            <ul class="nav nav-tabs card-header-tabs" id="sourceDetailTabs">
                                <li class="nav-item">
                                    <a class="nav-link active" id="detailsTab" data-bs-toggle="tab" href="#details">详情</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="statsTab" data-bs-toggle="tab" href="#stats">统计</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="configTab" data-bs-toggle="tab" href="#config">配置</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="testResultTab" data-bs-toggle="tab" href="#testResult">测试结果</a>
                                </li>
                            </ul>
                        </div>
                        <div class="card-body">
                            <div class="tab-content">
                                <div class="tab-pane fade show active" id="details">
                                    <div id="sourceDetailsContainer">
                                        <div class="alert alert-info">
                                            <p>从列表中选择一个源以查看其详情。</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-pane fade" id="stats">
                                    <div id="sourceStatsContainer">
                                        <div class="alert alert-info">
                                            <p>从列表中选择一个源以查看其统计信息。</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-pane fade" id="config">
                                    <div id="sourceConfigContainer">
                                        <div class="alert alert-info">
                                            <p>从列表中选择一个源以查看和编辑其配置。</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-pane fade" id="testResult">
                                    <div id="sourceTestResultContainer">
                                        <div class="alert alert-info">
                                            <p>点击"测试源"来运行测试并查看结果。</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Edit Source Modal -->
            <div class="modal fade" id="editSourceModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">编辑源</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="editSourceForm">
                                <input type="hidden" id="editSourceId">
                                
                                <div class="mb-3">
                                    <label for="editSourceName" class="form-label">源名称</label>
                                    <input type="text" class="form-control" id="editSourceName" required>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="editSourceUrl" class="form-label">源URL</label>
                                    <input type="url" class="form-control" id="editSourceUrl">
                                </div>
                                
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="editSourceCategory" class="form-label">类别</label>
                                        <select class="form-select" id="editSourceCategory">
                                            <option value="news">新闻</option>
                                            <option value="technology">科技</option>
                                            <option value="finance">财经</option>
                                            <option value="sports">体育</option>
                                            <option value="entertainment">娱乐</option>
                                            <option value="science">科学</option>
                                            <option value="health">健康</option>
                                            <option value="politics">政治</option>
                                            <option value="business">商业</option>
                                            <option value="other">其他</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="editSourceStatus" class="form-label">状态</label>
                                        <select class="form-select" id="editSourceStatus">
                                            <option value="active">激活</option>
                                            <option value="inactive">未激活</option>
                                            <option value="error">错误</option>
                                            <option value="warning">警告</option>
                                        </select>
                                    </div>
                                </div>
                                
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="editUpdateInterval" class="form-label">更新间隔 (秒)</label>
                                        <input type="number" class="form-control" id="editUpdateInterval" min="300" max="86400">
                                    </div>
                                    <div class="col-md-6">
                                        <label for="editCacheTtl" class="form-label">缓存TTL (秒)</label>
                                        <input type="number" class="form-control" id="editCacheTtl" min="60" max="43200">
                                    </div>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="editSourceConfig" class="form-label">源配置 (JSON)</label>
                                    <div id="configEditor"></div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                            <button type="button" class="btn btn-primary" id="saveSourceBtn">保存更改</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Delete Confirmation Modal -->
            <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">确认删除</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>您确定要删除源 <strong id="deleteSourceName"></strong> 吗？</p>
                            <p class="text-danger">此操作无法撤消。</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                            <button type="button" class="btn btn-danger" id="confirmDeleteBtn">删除</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- HTML Display Modal -->
    <div class="modal fade" id="htmlDisplayModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">HTML结构可视化</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-0">
                    <div class="html-visualization-container">
                        <div id="htmlVisualization" class="p-3"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                    <button type="button" class="btn btn-primary" id="copyVisualizedHtmlBtn">复制格式化HTML</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- CodeMirror JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/htmlmixed/htmlmixed.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/xml/xml.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/css/css.min.js"></script>

    <!-- Main Script -->
    <script>
        // Global variables
        const API_BASE_URL = '/api';
        let htmlEditor;
        let previewEditor;
        let configEditor;
        let selectedSource = null;
        // 调试模式开关，设置为true时会显示更多的调试信息
        const DEBUG_MODE = true;
        
        // 调试日志函数
        function debugLog(...args) {
            if (DEBUG_MODE) {
                console.log('[DEBUG]', ...args);
            }
        }
        
        // Basic navigation functionality
        document.addEventListener('DOMContentLoaded', function() {
            const navCreate = document.getElementById('navCreate');
            const navManage = document.getElementById('navManage');
            const createSection = document.getElementById('createSourceSection');
            const manageSection = document.getElementById('manageSourcesSection');
            
            // Initialize editors
            htmlEditor = CodeMirror(document.getElementById('htmlEditor'), {
                mode: 'htmlmixed',
                theme: 'monokai',
                lineNumbers: true
            });
            
            // 添加HTML编辑器变化监听
            htmlEditor.on('change', function() {
                // 如果HTML内容变化且长度超过一定阈值，启用分析按钮和格式化按钮
                const htmlContent = htmlEditor.getValue();
                const contentLength = htmlContent.length;
                document.getElementById('analyzeHtmlBtn').disabled = contentLength < 100;
                document.getElementById('formatHtmlBtn').disabled = contentLength < 10;
            });
            
            // 添加格式化HTML按钮事件
            document.getElementById('formatHtmlBtn').addEventListener('click', function() {
                formatHtml();
                // Show the copy button after formatting
                document.getElementById('copyVisualizedHtmlBtn').style.display = 'inline-block';
            });
            
            // 添加一个API健康检查按钮
            const headerNav = document.querySelector('.navbar-nav');
            if (headerNav) {
                const apiCheckLi = document.createElement('li');
                apiCheckLi.className = 'nav-item';
                apiCheckLi.innerHTML = `
                    <a class="nav-link" href="#" id="apiHealthCheck">
                        <i class="bi bi-activity"></i> API检查
                    </a>
                `;
                headerNav.appendChild(apiCheckLi);
                
                document.getElementById('apiHealthCheck').addEventListener('click', function(e) {
                    e.preventDefault();
                    checkApiHealth();
                });
            }
            
            // 添加格式化并显示按钮事件
            document.getElementById('formatAndDisplayBtn').addEventListener('click', function() {
                formatAndDisplayHtml();
                // Show the copy button after formatting and displaying
                document.getElementById('copyVisualizedHtmlBtn').style.display = 'inline-block';
            });
            
            // 添加分析HTML按钮事件
            document.getElementById('analyzeHtmlBtn').addEventListener('click', function() {
                analyzeHtml();
            });
            
            // 添加复制可视化HTML按钮事件
            document.getElementById('copyVisualizedHtmlBtn').addEventListener('click', function() {
                const htmlContent = htmlEditor.getValue();
                
                // 复制到剪贴板
                navigator.clipboard.writeText(htmlContent).then(function() {
                    showToast('成功', '已复制格式化后的HTML到剪贴板', 'success');
                }).catch(function(err) {
                    console.error('无法复制文本: ', err);
                    showToast('错误', '复制到剪贴板失败，请手动复制', 'danger');
                });
            });
            
            previewEditor = CodeMirror(document.getElementById('previewEditor'), {
                mode: 'python',
                theme: 'monokai',
                lineNumbers: true,
                readOnly: true
            });
            
            configEditor = CodeMirror(document.getElementById('configEditor'), {
                mode: { name: 'javascript', json: true },
                theme: 'monokai',
                lineNumbers: true
            });
            
            // Navigation
            navCreate.addEventListener('click', (e) => {
                e.preventDefault();
                createSection.style.display = 'block';
                manageSection.style.display = 'none';
                navCreate.classList.add('active');
                navManage.classList.remove('active');
            });
            
            navManage.addEventListener('click', (e) => {
                e.preventDefault();
                createSection.style.display = 'none';
                manageSection.style.display = 'block';
                navCreate.classList.remove('active');
                navManage.classList.add('active');
                
                // Load sources
                loadSources();
            });
            
            // Set up form handlers
            document.getElementById('previewSourceBtn').addEventListener('click', function() {
                const sourceCode = generateSourceCode();
                previewEditor.setValue(sourceCode);
                new bootstrap.Modal(document.getElementById('previewModal')).show();
            });
            
            document.getElementById('createSourceForm').addEventListener('submit', function(e) {
                e.preventDefault();
                createSource();
            });
            
            // Set up action buttons in management section
            document.getElementById('refreshSourcesBtn').addEventListener('click', loadSources);
            
            document.getElementById('testSelectedSourceBtn').addEventListener('click', function() {
                if (selectedSource) {
                    testSource(selectedSource);
                    
                    // 切换到测试结果选项卡
                    const testResultTab = document.querySelector('#sourceDetailTabs a[href="#testResult"]');
                    const tabInstance = new bootstrap.Tab(testResultTab);
                    tabInstance.show();
                }
            });
            
            document.getElementById('activateSourceBtn').addEventListener('click', function() {
                if (selectedSource) {
                    showLoader(`激活源中: ${selectedSource}...`);
                    
                    fetch(`/api/sources/${selectedSource}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + (localStorage.getItem('auth_token') || ''),
                            'X-API-Key': localStorage.getItem('api_key') || ''
                        },
                        body: JSON.stringify({
                            status: 'active'
                        }),
                        credentials: 'include' // 包含cookies，这对于会话认证很重要
                    })
                    .then(response => {
                        if (!response.ok) {
                            // 详细记录错误
                            console.error('激活源失败，状态码:', response.status, response.statusText);
                            return response.text().then(text => {
                                let errorDetail = '激活源失败';
                                try {
                                    const errorJson = JSON.parse(text);
                                    errorDetail = errorJson.detail || `API错误: ${response.status} ${response.statusText}`;
                                    console.error('API错误详情:', errorJson);
                                } catch (e) {
                                    // 如果不是JSON，直接使用文本
                                    errorDetail = `API错误: ${response.status} ${response.statusText}. ${text}`;
                                    console.error('API响应内容:', text);
                                }
                                throw new Error(errorDetail);
                            });
                        }
                        return response.json();
                    })
                    .then(result => {
                        hideLoader();
                        
                        // 显示成功提示
                        const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                        document.getElementById('toastMessage').textContent = `源 "${result.name}" 已成功激活！`;
                        toast.show();
                        
                        // 更新源列表以反映状态变化
                        loadSources();
                        
                        // Show success message
                        document.getElementById('resultModalTitle').textContent = '源已激活';
                        document.getElementById('resultModalBody').innerHTML = `
                            <div class="alert alert-success">
                                <p><strong>源 "${result.name}" 已成功激活！</strong></p>
                                <p>源现在处于活动状态，将用于新闻聚合。</p>
                            </div>
                            <p>您可以在"管理源"部分管理此源。</p>
                        `;
                        
                        // 显示模态框
                        new bootstrap.Modal(document.getElementById('resultModal')).show();
                    })
                    .catch(error => {
                        hideLoader();
                        
                        console.error('激活源时出错:', error);
                        
                        // 检查是否是认证错误
                        if (error.message.includes('Not authenticated') || 
                            error.message.includes('401') || 
                            error.message.includes('auth') || 
                            error.message.includes('认证')) {
                            
                            // 处理认证错误
                            handleAuthError(error, () => {
                                // 认证成功后重新尝试激活
                                activateSource(selectedSource);
                            });
                            return;
                        }
                        
                        // 使用Toast显示错误
                        const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                        document.getElementById('toastMessage').textContent = `激活源失败: ${error.message}`;
                        document.getElementById('notificationToast').classList.add('bg-danger', 'text-white');
                        toast.show();
                        
                        // 5秒后恢复原来的样式
                        setTimeout(() => {
                            document.getElementById('notificationToast').classList.remove('bg-danger', 'text-white');
                        }, 5000);
                        
                        // Show error message
                        document.getElementById('resultModalTitle').textContent = '错误';
                        document.getElementById('resultModalBody').innerHTML = `
                            <div class="alert alert-danger">
                                <p><strong>激活源失败</strong></p>
                                <p>${error.message}</p>
                            </div>
                        `;
                        
                        // 显示模态框
                        new bootstrap.Modal(document.getElementById('resultModal')).show();
                    });
                }
            });
            
            document.getElementById('deactivateSourceBtn').addEventListener('click', function() {
                if (selectedSource) {
                    showLoader(`停用源中: ${selectedSource}...`);
                    
                    fetch(`/api/sources/${selectedSource}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            status: 'inactive'
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => {
                                throw new Error(err.detail || '停用源失败');
                            });
                        }
                        return response.json();
                    })
                    .then(result => {
                        hideLoader();
                        
                        // Reload sources
                        loadSources();
                        
                        // Reload source details
                        loadSourceDetails(selectedSource);
                        
                        // Show notification
                        alert(`源 "${result.name}" 已成功停用！`);
                    })
                    .catch(error => {
                        hideLoader();
                        
                        alert('停用源失败: ' + error.message);
                    });
                }
            });
            
            document.getElementById('deleteSourceBtn').addEventListener('click', function() {
                if (selectedSource) {
                    // Confirm deletion
                    fetch(`/api/sources/${selectedSource}`)
                    .then(response => response.json())
                    .then(source => {
                        document.getElementById('deleteSourceName').textContent = source.name;
                        new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show();
                        
                        // Set up confirm button
                        document.getElementById('confirmDeleteBtn').onclick = function() {
                            deleteSource(selectedSource);
                            bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();
                        };
                    })
                    .catch(error => {
                        console.error('Error loading source details:', error);
                        alert('Failed to load source details: ' + error.message);
                    });
                }
            });
        });
        
        // Helper functions
        function showLoader(message = 'Loading...') {
            document.getElementById('loaderMessage').textContent = message;
            document.getElementById('globalLoader').style.display = 'flex';
        }
        
        function hideLoader() {
            document.getElementById('globalLoader').style.display = 'none';
            
            // 也清除其他可能的遮罩层
            document.querySelectorAll('.loading-overlay, .overlay').forEach(overlay => {
                overlay.style.display = 'none';
            });
            
            // 确保body样式正常
            document.body.style.overflow = '';
            document.body.style.position = '';
        }
        
        function getFormData() {
            return {
                id: document.getElementById('sourceId').value,
                name: document.getElementById('sourceName').value,
                url: document.getElementById('sourceUrl').value,
                category: document.getElementById('sourceCategory').value,
                country: document.getElementById('sourceCountry').value,
                language: document.getElementById('sourceLanguage').value,
                update_interval: parseInt(document.getElementById('updateInterval').value),
                cache_ttl: parseInt(document.getElementById('cacheTtl').value),
                use_selenium: document.getElementById('useSelenium').checked,
                selectors: {
                    item: document.getElementById('itemSelector').value,
                    title: document.getElementById('titleSelector').value,
                    link: document.getElementById('linkSelector').value || '',
                    date: document.getElementById('dateSelector').value || '',
                    summary: document.getElementById('summarySelector').value || '',
                    content: document.getElementById('contentSelector').value || ''
                },
                html_example: htmlEditor.getValue()
            };
        }
        
        function generateSourceCode() {
            const data = getFormData();
            
            // Generate simple Python source code preview
            return `# Auto-generated source adapter for ${data.name}
import logging
from bs4 import BeautifulSoup
from worker.sources.web import WebNewsSource
from worker.sources.base import NewsItemModel

logger = logging.getLogger(__name__)

class ${data.id.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join('')}Source(WebNewsSource):
    """
    ${data.name} adapter
    Fetches news from ${data.url}
    """
    
    def __init__(self, source_id="${data.id}", name="${data.name}", url="${data.url}"):
        super().__init__(
            source_id=source_id,
            name=name,
            url=url,
            update_interval=${data.update_interval},
            cache_ttl=${data.cache_ttl},
            category="${data.category}",
            country="${data.country}",
            language="${data.language}"
        )
    
    async def parse_response(self, html):
        # Parse HTML using selectors:
        # Item: ${data.selectors.item}
        # Title: ${data.selectors.title}
        # Link: ${data.selectors.link} 
        # Date: ${data.selectors.date}
        # Summary: ${data.selectors.summary}
        # Content: ${data.selectors.content}
        pass
`;
        }
        
        function createSource() {
            showLoader('创建源中...');
            
            const data = getFormData();
            
            // 自动为源ID添加custom-前缀，如果尚未添加
            if (!data.id.startsWith('custom-')) {
                data.id = 'custom-' + data.id;
                debugLog('已自动为源ID添加custom-前缀:', data.id);
            }
            
            // Call the API to create the source
            fetch('/api/source-test/create-custom-source', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.detail || '创建源失败');
                    });
                }
                return response.json();
            })
            .then(result => {
                hideLoader();
                
                // Show success message
                document.getElementById('resultModalTitle').textContent = '源已创建';
                document.getElementById('resultModalBody').innerHTML = `
                    <div class="alert alert-success">
                        <p><strong>源 "${result.source.name}" 创建成功！</strong></p>
                        <p><strong>ID:</strong> <span class="badge bg-primary">${result.source.id}</span></p>
                        <p><strong>状态:</strong> <span class="badge ${result.source.status === 'active' ? 'bg-success' : 'bg-secondary'}">${result.source.status}</span></p>
                    </div>
                    <div class="alert alert-info">
                        <p><i class="bi bi-info-circle"></i> 点击"测试源"来测试这个新建的源适配器。</p>
                        <p><small>源ID: ${result.source.id} 将被用于测试</small></p>
                    </div>
                `;
                
                new bootstrap.Modal(document.getElementById('resultModal')).show();
            })
            .catch(error => {
                hideLoader();
                
                // Show error message
                document.getElementById('resultModalTitle').textContent = '错误';
                document.getElementById('resultModalBody').innerHTML = `
                    <div class="alert alert-danger">
                        <p><strong>创建源失败</strong></p>
                        <p>${error.message}</p>
                    </div>
                `;
                
                new bootstrap.Modal(document.getElementById('resultModal')).show();
            });
        }
        
        // Add new function to test a source
        document.getElementById('testNewSourceBtn').addEventListener('click', function() {
            const sourceId = document.getElementById('sourceId').value;
            
            if (!sourceId) {
                alert('请先输入有效的源ID');
                return;
            }
            
            // 自动为源ID添加custom-前缀，如果尚未添加
            let testId = sourceId;
            if (!testId.startsWith('custom-')) {
                testId = 'custom-' + testId;
            }
            
            debugLog('testNewSourceBtn click, sourceId:', testId);
            
            // 显示提示信息，告知用户测试结果将会显示在哪里
            const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
            document.getElementById('toastMessage').textContent = `正在测试源 ${testId}，结果将显示在"测试结果"标签页中`;
            toast.show();
            
            // 切换到测试结果标签页
            if (document.getElementById('testResultTab')) {
                const tab = new bootstrap.Tab(document.getElementById('testResultTab'));
                tab.show();
            }
            
            // 开始测试
            testSource(testId);
        });
        
        function testSource(sourceId) {
            // 验证sourceId不为空
            if (!sourceId || sourceId.trim() === '') {
                alert('错误：源ID不能为空');
                console.error('测试源失败: 源ID为空');
                return;
            }
            
            // 自动为源ID添加custom-前缀，如果尚未添加
            if (!sourceId.startsWith('custom-')) {
                sourceId = 'custom-' + sourceId;
                debugLog('已自动为测试的源ID添加custom-前缀:', sourceId);
            }
            
            debugLog('开始测试源, sourceId:', sourceId);
            showLoader(`测试源中: ${sourceId}...`);
            
            // 更新测试结果容器状态
            const testResultContainer = document.getElementById('sourceTestResultContainer');
            testResultContainer.innerHTML = `
                <div class="alert alert-info">
                    <div class="d-flex align-items-center">
                        <div class="loading me-3"></div>
                        <p class="mb-0">正在测试源 ${sourceId}...</p>
                    </div>
                </div>
            `;
            
            // 记录当前时间用于计算请求时长
            const startTime = new Date();
            
            // 生成API URL并记录
            const apiUrl = `/api/source-test/test-source/${sourceId}`;
            debugLog('测试源API URL:', apiUrl);
            
            // 检查API是否可用
            fetch('/api/source-test/source-types')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`API服务检查失败: ${response.status} ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(sourceTypes => {
                    // API可用，记录所有源类型
                    debugLog('可用源类型:', sourceTypes);
                    
                    // 继续测试特定源
                    testSpecificSource(sourceId, apiUrl, startTime);
                })
                .catch(error => {
                    // API不可用
                    debugLog('API服务检查失败:', error);
                    
                    hideLoader();
                    testResultContainer.innerHTML = `
                        <div class="alert alert-danger">
                            <p><strong>API服务可能不可用</strong></p>
                            <p>${error.message}</p>
                            <button class="btn btn-sm btn-outline-primary mt-2" onclick="checkApiHealth()">检查API状态</button>
                        </div>
                    `;
                    
                    // 显示错误模态框
                    document.getElementById('resultModalTitle').textContent = 'API服务错误';
                    document.getElementById('resultModalBody').innerHTML = `
                        <div class="alert alert-danger">
                            <p><strong>API服务可能不可用</strong></p>
                            <p>${error.message}</p>
                        </div>
                        <div class="alert alert-warning">
                            <p><strong>可能的原因:</strong></p>
                            <ul>
                                <li>后端API服务未启动或无法访问</li>
                                <li>网络连接问题</li>
                                <li>服务器内部错误</li>
                            </ul>
                        </div>
                        <div class="mt-3">
                            <button class="btn btn-primary" onclick="checkApiHealth()">运行API健康检查</button>
                        </div>
                    `;
                    
                    new bootstrap.Modal(document.getElementById('resultModal')).show();
                });
        }
        
        function testSpecificSource(sourceId, apiUrl, startTime) {
            // Call the API to test the source
            fetch(apiUrl, {
                headers: {
                    'Accept': 'application/json'
                }
            })
            .then(response => {
                const endTime = new Date();
                const requestTime = ((endTime - startTime) / 1000).toFixed(2);
                
                debugLog(`API请求完成，响应状态: ${response.status} ${response.statusText}, 耗时: ${requestTime}秒`);
                console.log(`API请求响应状态: ${response.status} ${response.statusText}, 耗时: ${requestTime}秒`);
                
                if (!response.ok) {
                    if (response.status === 404) {
                        throw new Error(`找不到源 "${sourceId}". API响应: ${response.status} ${response.statusText}`);
                    } else {
                        return response.text().then(errorText => {
                            try {
                                // 尝试解析为JSON
                                const errorJson = JSON.parse(errorText);
                                throw new Error(errorJson.detail || `测试源失败. API响应: ${response.status} ${response.statusText}`);
                            } catch (e) {
                                // 如果不是JSON，则直接使用文本
                                throw new Error(`测试源失败. API响应: ${response.status} ${response.statusText}. 内容: ${errorText.substring(0, 100)}...`);
                            }
                        });
                    }
                }
                return response.json();
            })
            .then(result => {
                hideLoader();
                debugLog('测试源结果:', result);
                
                // 确保关闭所有可能的模态框，防止遮罩层问题
                document.querySelectorAll('.modal').forEach(modal => {
                    const bsModal = bootstrap.Modal.getInstance(modal);
                    if (bsModal) {
                        bsModal.hide();
                    }
                });
                
                // 强制清除所有可能的遮罩层
                document.querySelectorAll('.modal-backdrop').forEach(backdrop => {
                    backdrop.remove();
                });
                document.body.classList.remove('modal-open');
                document.body.style.overflow = '';
                document.body.style.paddingRight = '';
                
                // 更新测试结果容器
                const testResultContainer = document.getElementById('sourceTestResultContainer');
                if (result.success) {
                    testResultContainer.innerHTML = `
                        <div class="alert alert-success">
                            <p><strong>测试成功！</strong></p>
                            <p>URL: <a href="${result.source_url || result.debug_info.url}" target="_blank">${result.source_url || result.debug_info.url}</a></p>
                            <p>源: ${result.source_name || sourceId}</p>
                            <p>找到条目数: ${result.items_count}</p>
                            <p>耗时: ${result.elapsed_time.toFixed(2)} 秒</p>
                        </div>
                        <div class="mb-3">
                            <button class="btn btn-success" id="activateSourceBtn">激活源</button>
                        </div>
                        ${result.items && result.items.length > 0 ? `
                            <div>
                                <h5>示例条目:</h5>
                                <div class="list-group">
                                    ${result.items.slice(0, 3).map(item => `
                                        <div class="list-group-item">
                                            <h6>${item.title}</h6>
                                            ${item.url ? `<p class="mb-1"><small><a href="${item.url}" target="_blank">${item.url}</a></small></p>` : ''}
                                            <p class="mb-0">${item.summary || ''}</p>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        ` : ''}
                        ${(result.items_count === 0 && result.debug_info) ? `
                            <div class="mt-3">
                                <div class="alert alert-warning">
                                    <p><strong>未找到任何条目</strong> - 以下是一些调试信息，可能帮助您调整选择器:</p>
                                </div>
                                <div class="accordion" id="modalDebugAccordion">
                                    <div class="accordion-item">
                                        <h2 class="accordion-header">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#modalLogsCollapse">
                                                调试日志
                                            </button>
                                        </h2>
                                        <div id="modalLogsCollapse" class="accordion-collapse collapse" data-bs-parent="#modalDebugAccordion">
                                            <div class="accordion-body">
                                                <pre class="bg-light p-2" style="max-height: 300px; overflow: auto; font-size: 0.8rem;">${result.debug_info.logs ? result.debug_info.logs.join('\n') : '无调试日志'}</pre>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="accordion-item">
                                        <h2 class="accordion-header">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#modalSelectorsCollapse">
                                                当前选择器
                                            </button>
                                        </h2>
                                        <div id="modalSelectorsCollapse" class="accordion-collapse collapse" data-bs-parent="#modalDebugAccordion">
                                            <div class="accordion-body">
                                                <div class="table-responsive">
                                                    <table class="table table-sm">
                                                        <thead>
                                                            <tr>
                                                                <th>选择器类型</th>
                                                                <th>当前值</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            <tr>
                                                                <td>项目选择器</td>
                                                                <td><code>${result.debug_info.selectors.item || '未设置'}</code></td>
                                                            </tr>
                                                            <tr>
                                                                <td>标题选择器</td>
                                                                <td><code>${result.debug_info.selectors.title || '未设置'}</code></td>
                                                            </tr>
                                                            <tr>
                                                                <td>链接选择器</td>
                                                                <td><code>${result.debug_info.selectors.link || '未设置'}</code></td>
                                                            </tr>
                                                            <tr>
                                                                <td>日期选择器</td>
                                                                <td><code>${result.debug_info.selectors.date || '未设置'}</code></td>
                                                            </tr>
                                                            <tr>
                                                                <td>摘要选择器</td>
                                                                <td><code>${result.debug_info.selectors.summary || '未设置'}</code></td>
                                                            </tr>
                                                            <tr>
                                                                <td>内容选择器</td>
                                                                <td><code>${result.debug_info.selectors.content || '未设置'}</code></td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                                <div class="alert alert-info">
                                                    <p>选择器提示:</p>
                                                    <ul>
                                                        <li>使用 <code>.</code> 指定类名 (例如: <code>.news-item</code>)</li>
                                                        <li>使用 <code>#</code> 指定ID (例如: <code>#news-list</code>)</li>
                                                        <li>使用 <code>标签名</code> 指定HTML标签 (例如: <code>article</code>)</li>
                                                        <li>使用组合选择器指定路径 (例如: <code>div.news > h2</code>)</li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="accordion-item">
                                        <h2 class="accordion-header">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#modalPageStructureCollapse">
                                                页面结构分析
                                            </button>
                                        </h2>
                                        <div id="modalPageStructureCollapse" class="accordion-collapse collapse" data-bs-parent="#modalDebugAccordion">
                                            <div class="accordion-body">
                                                ${result.debug_info.page_debug && Object.keys(result.debug_info.page_debug).length > 0 ? `
                                                <div>
                                                    <h6>潜在适合项目选择器:</h6>
                                                    <div class="list-group mb-3">
                                                        ${result.debug_info.page_debug.potential_item_selectors ? result.debug_info.page_debug.potential_item_selectors.map(item => `
                                                            <button class="list-group-item list-group-item-action" onclick="setSelector('item', '${item.selector}')">
                                                                <code>${item.selector}</code>
                                                                <span class="badge bg-primary float-end">${item.count} 个元素</span>
                                                                ${item.example ? `<small class="d-block text-muted mt-1">示例: ${item.example.substring(0, 60)}...</small>` : ''}
                                                            </button>
                                                        `).join('') : '<div class="alert alert-warning">未找到潜在的项目选择器</div>'}
                                                    </div>
                                                    
                                                    <h6>常见内容块:</h6>
                                                    <div class="list-group mb-3">
                                                        ${result.debug_info.page_debug.common_blocks ? result.debug_info.page_debug.common_blocks.map(item => `
                                                            <div class="list-group-item">
                                                                <code>${item.selector}</code>
                                                                <span class="badge bg-info float-end">${item.count} 个元素</span>
                                                                ${item.text ? `<small class="d-block text-muted mt-1">文本: ${item.text.substring(0, 60)}...</small>` : ''}
                                                            </div>
                                                        `).join('') : '<div class="alert alert-warning">未找到常见内容块</div>'}
                                                    </div>
                                                    
                                                    ${result.debug_info.page_debug.detected_titles ? `
                                                    <h6>检测到的标题:</h6>
                                                    <div class="list-group mb-3">
                                                        ${result.debug_info.page_debug.detected_titles.map(item => `
                                                            <button class="list-group-item list-group-item-action" onclick="setSelector('title', '${item.selector}')">
                                                                <code>${item.selector}</code>
                                                                <span class="badge bg-success float-end">${item.count} 个元素</span>
                                                                ${item.text ? `<small class="d-block text-muted mt-1">示例: ${item.text.substring(0, 60)}...</small>` : ''}
                                                            </button>
                                                        `).join('')}
                                                    </div>
                                                    ` : ''}
                                                    
                                                    ${result.debug_info.page_debug.detected_links ? `
                                                    <h6>检测到的链接:</h6>
                                                    <div class="list-group mb-3">
                                                        ${result.debug_info.page_debug.detected_links.map(item => `
                                                            <button class="list-group-item list-group-item-action" onclick="setSelector('link', '${item.selector}')">
                                                                <code>${item.selector}</code>
                                                                <span class="badge bg-success float-end">${item.count} 个元素</span>
                                                                ${item.href ? `<small class="d-block text-muted mt-1">示例: ${item.href.substring(0, 60)}...</small>` : ''}
                                                            </button>
                                                        `).join('')}
                                                    </div>
                                                    ` : ''}
                                                    
                                                    ${result.debug_info.page_debug.detected_dates ? `
                                                    <h6>检测到的日期:</h6>
                                                    <div class="list-group mb-3">
                                                        ${result.debug_info.page_debug.detected_dates.map(item => `
                                                            <button class="list-group-item list-group-item-action" onclick="setSelector('date', '${item.selector}')">
                                                                <code>${item.selector}</code>
                                                                <span class="badge bg-success float-end">${item.count} 个元素</span>
                                                                ${item.text ? `<small class="d-block text-muted mt-1">示例: ${item.text.substring(0, 60)}...</small>` : ''}
                                                            </button>
                                                        `).join('')}
                                                    </div>
                                                    ` : ''}
                                                </div>
                                                ` : `
                                                <div class="alert alert-info">
                                                    <p>此源未提供页面结构分析。这可能是因为:</p>
                                                    <ul>
                                                        <li>源没有使用Selenium</li>
                                                        <li>分析过程中发生错误</li>
                                                        <li>页面结构不适合自动分析</li>
                                                    </ul>
                                                    ${result.debug_info.use_selenium ? '' : '<p><strong>注意:</strong> 启用Selenium可以获得更详细的页面结构分析</p>'}
                                                </div>
                                                `}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="mt-3">
                                    <p>要检查页面HTML和选择器，建议使用浏览器开发者工具:</p>
                                    <ol>
                                        <li class="mb-2">
                                            <strong>目标网站地址:</strong>
                                            <div class="input-group mb-2 mt-1">
                                                <input type="text" class="form-control" value="${result.source_url || result.debug_info.url}" readonly />
                                                <a href="${result.source_url || result.debug_info.url}" target="_blank" class="btn btn-primary">
                                                    <i class="bi bi-box-arrow-up-right"></i> 在新标签页打开
                                                </a>
                                            </div>
                                        </li>
                                        <li>按 F12 或右键点击 -> 检查元素，打开开发者工具</li>
                                        <li>使用元素选择器工具(按下Ctrl+Shift+C或点击开发者工具左上角的箭头图标)，点击页面上的新闻项目</li>
                                        <li>观察高亮显示的HTML代码，确定合适的选择器</li>
                                    </ol>
                                </div>
                            </div>
                        ` : ''}
                        <div class="mt-3">
                            <p><strong>技术信息:</strong></p>
                            <pre class="bg-light p-2 border" style="max-height: 200px; overflow: auto; font-size: 0.8rem;">${JSON.stringify(result, null, 2)}</pre>
                        </div>
                    `;
                    
                    // 自动切换到测试结果标签页
                    const testResultTab = document.getElementById('testResultTab');
                    if (testResultTab) {
                        // 创建一个bootstrap tab实例并显示
                        const tab = new bootstrap.Tab(testResultTab);
                        tab.show();
                        
                        // 向用户显示成功提示
                        const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                        document.getElementById('toastMessage').textContent = `源 ${sourceId} 测试成功，找到 ${result.items_count} 条内容！`;
                        toast.show();
                    }
                    
                    // Add event listener for activate button
                    document.getElementById('activateSourceBtn').addEventListener('click', function() {
                        activateSource(sourceId);
                    });
                } else {
                    // Display error in test result container
                    testResultContainer.innerHTML = `
                        <div class="alert alert-danger">
                            <p><strong>源测试失败</strong></p>
                            <p>${result.error || '发生未知错误'}</p>
                        </div>
                    `;
                    
                    // Display error in modal
                    document.getElementById('resultModalTitle').textContent = '测试失败';
                    document.getElementById('resultModalBody').innerHTML = `
                        <div class="alert alert-danger">
                            <p><strong>源测试失败</strong></p>
                            <p>${result.error || '发生未知错误'}</p>
                        </div>
                        <div class="mt-3">
                            <p><strong>错误详情:</strong></p>
                            <pre class="bg-light p-2 border" style="max-height: 200px; overflow: auto; font-size: 0.8rem;">${JSON.stringify(result, null, 2)}</pre>
                        </div>
                    `;
                }
                
                // Show modal if not already visible
                if (!document.querySelector('.modal.show')) {
                    new bootstrap.Modal(document.getElementById('resultModal')).show();
                }
            })
            .catch(error => {
                hideLoader();
                debugLog('测试源错误:', error);
                
                // 确保关闭所有可能的模态框，防止遮罩层问题
                document.querySelectorAll('.modal').forEach(modal => {
                    const bsModal = bootstrap.Modal.getInstance(modal);
                    if (bsModal) {
                        bsModal.hide();
                    }
                });
                
                // 强制清除所有可能的遮罩层
                document.querySelectorAll('.modal-backdrop').forEach(backdrop => {
                    backdrop.remove();
                });
                document.body.classList.remove('modal-open');
                document.body.style.overflow = '';
                document.body.style.paddingRight = '';
                
                // 更新测试结果容器
                const testResultContainer = document.getElementById('sourceTestResultContainer');
                testResultContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <p><strong>测试源失败</strong></p>
                        <p>${error.message}</p>
                        <button class="btn btn-sm btn-outline-primary mt-2" onclick="testSource('${sourceId}')">重试</button>
                    </div>
                `;
                
                // Show error message in modal
                document.getElementById('resultModalTitle').textContent = '测试源失败';
                document.getElementById('resultModalBody').innerHTML = `
                    <div class="alert alert-danger">
                        <p><strong>测试源失败</strong></p>
                        <p>${error.message}</p>
                    </div>
                    <div class="alert alert-warning">
                        <p><strong>可能的原因:</strong></p>
                        <ul>
                            <li>源 ID "${sourceId}" 可能不存在或尚未注册</li>
                            <li>服务器上的源适配器加载失败</li>
                            <li>源配置可能不正确</li>
                        </ul>
                    </div>
                    <div class="mt-3">
                        <p>检查源ID是否正确，然后重试。</p>
                        <p>当前API请求路径: <code>/api/source-test/test-source/${sourceId}</code></p>
                        <div class="alert alert-info">
                            <p><strong>调试信息:</strong></p>
                            <p>请求时间: ${new Date().toLocaleString()}</p>
                            <p>浏览器: ${navigator.userAgent}</p>
                            <p>如果问题持续出现，请尝试以下步骤:</p>
                            <ol>
                                <li>检查浏览器控制台是否有更详细的错误信息</li>
                                <li>确认后端服务运行正常</li>
                                <li>尝试直接在浏览器中访问: <a href="/api/source-test/source-types" target="_blank">/api/source-test/source-types</a> 验证API是否可用</li>
                                <li>检查源ID命名是否符合规范（仅使用小写字母、数字和连字符）</li>
                            </ol>
                        </div>
                        <button class="btn btn-sm btn-secondary mt-2" onclick="showDirectApiTest('${sourceId}')">显示API直接测试工具</button>
                    </div>
                `;
                
                new bootstrap.Modal(document.getElementById('resultModal')).show();
            });
        }
        
        // 添加API直接测试工具函数
        function showDirectApiTest(sourceId) {
            // 在结果模态框中添加API测试表单
            const testForm = document.createElement('div');
            testForm.className = 'mt-4 p-3 border rounded bg-light';
            testForm.innerHTML = `
                <h5>API直接测试工具</h5>
                <div class="mb-3">
                    <label class="form-label">API端点:</label>
                    <div class="input-group">
                        <input type="text" class="form-control" id="apiTestUrl" value="/api/source-test/test-source/${sourceId}" />
                        <input type="number" class="form-control" id="apiTimeout" placeholder="超时(秒)" value="60" style="max-width: 100px;" />
                        <button class="btn btn-primary" id="testApiDirectBtn">测试</button>
                    </div>
                    <div class="form-text">可以修改端点路径或参数进行测试</div>
                </div>
                <div class="mb-3" id="apiTestResult">
                    <div class="alert alert-info">点击"测试"按钮开始API测试</div>
                </div>
            `;
            
            document.getElementById('resultModalBody').appendChild(testForm);
            
            // 添加测试按钮事件
            document.getElementById('testApiDirectBtn').addEventListener('click', function() {
                const apiUrl = document.getElementById('apiTestUrl').value;
                const timeout = document.getElementById('apiTimeout').value;
                const resultContainer = document.getElementById('apiTestResult');
                
                resultContainer.innerHTML = `
                    <div class="alert alert-info">
                        <div class="d-flex align-items-center">
                            <div class="loading me-3"></div>
                            <p class="mb-0">正在测试API: ${apiUrl}?timeout=${timeout}...</p>
                        </div>
                    </div>
                `;
                
                // 执行API请求
                const startTime = new Date();
                fetch(`${apiUrl}?timeout=${timeout}`)
                    .then(response => {
                        const endTime = new Date();
                        const requestTime = ((endTime - startTime) / 1000).toFixed(2);
                        
                        // 显示响应头信息
                        const headers = Array.from(response.headers.entries())
                            .map(([key, value]) => `<tr><td>${key}</td><td>${value}</td></tr>`)
                            .join('');
                        
                        if (!response.ok) {
                            return response.text().then(text => {
                                let errorDetail = text;
                                try {
                                    const errorJson = JSON.parse(text);
                                    errorDetail = JSON.stringify(errorJson, null, 2);
                                } catch (e) {
                                    // Keep as text if not JSON
                                }
                                
                                resultContainer.innerHTML = `
                                    <div class="alert alert-danger">
                                        <p><strong>API请求失败</strong> (${response.status} ${response.statusText})</p>
                                        <p>请求时间: ${requestTime}秒</p>
                                        <p>错误详情:</p>
                                        <pre class="bg-dark text-light p-2 mt-2" style="max-height: 200px; overflow: auto;">${errorDetail}</pre>
                                        <p class="mt-2">响应头:</p>
                                        <div style="max-height: 150px; overflow: auto;">
                                            <table class="table table-sm table-bordered">
                                                <thead><tr><th>名称</th><th>值</th></tr></thead>
                                                <tbody>${headers}</tbody>
                                            </table>
                                        </div>
                                    </div>
                                `;
                                throw new Error(`API请求失败: ${response.status} ${response.statusText}`);
                            });
                        }
                        
                        return response.json().then(data => {
                            resultContainer.innerHTML = `
                                <div class="alert alert-success">
                                    <p><strong>API请求成功</strong> (${response.status} ${response.statusText})</p>
                                    <p>请求时间: ${requestTime}秒</p>
                                    <p>响应数据:</p>
                                    <pre class="bg-dark text-light p-2 mt-2" style="max-height: 200px; overflow: auto;">${JSON.stringify(data, null, 2)}</pre>
                                    <p class="mt-2">响应头:</p>
                                    <div style="max-height: 150px; overflow: auto;">
                                        <table class="table table-sm table-bordered">
                                            <thead><tr><th>名称</th><th>值</th></tr></thead>
                                            <tbody>${headers}</tbody>
                                        </table>
                                    </div>
                                </div>
                            `;
                            return data;
                        });
                    })
                    .catch(error => {
                        resultContainer.innerHTML = `
                            <div class="alert alert-danger">
                                <p><strong>请求发生错误</strong></p>
                                <p>${error.message}</p>
                            </div>
                        `;
                    });
            });
        }
        
        function activateSource(sourceId) {
            showLoader(`激活源中: ${sourceId}...`);
            
            // Call the API to activate the source
            fetch(`/api/sources/${sourceId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + (localStorage.getItem('auth_token') || ''),
                    'X-API-Key': localStorage.getItem('api_key') || ''
                },
                body: JSON.stringify({
                    status: 'active'
                }),
                credentials: 'include' // 包含cookies，这对于会话认证很重要
            })
            .then(response => {
                if (!response.ok) {
                    // 详细记录错误
                    console.error('激活源失败，状态码:', response.status, response.statusText);
                    return response.text().then(text => {
                        let errorDetail = '激活源失败';
                        try {
                            const errorJson = JSON.parse(text);
                            errorDetail = errorJson.detail || `API错误: ${response.status} ${response.statusText}`;
                            console.error('API错误详情:', errorJson);
                        } catch (e) {
                            // 如果不是JSON，直接使用文本
                            errorDetail = `API错误: ${response.status} ${response.statusText}. ${text}`;
                            console.error('API响应内容:', text);
                        }
                        throw new Error(errorDetail);
                    });
                }
                return response.json();
            })
            .then(result => {
                hideLoader();
                
                // 显示成功提示
                const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                document.getElementById('toastMessage').textContent = `源 "${result.name}" 已成功激活！`;
                toast.show();
                
                // 更新源列表以反映状态变化
                loadSources();
                
                // Show success message
                document.getElementById('resultModalTitle').textContent = '源已激活';
                document.getElementById('resultModalBody').innerHTML = `
                    <div class="alert alert-success">
                        <p><strong>源 "${result.name}" 已成功激活！</strong></p>
                        <p>源现在处于活动状态，将用于新闻聚合。</p>
                    </div>
                    <p>您可以在"管理源"部分管理此源。</p>
                `;
                
                // 显示模态框
                new bootstrap.Modal(document.getElementById('resultModal')).show();
            })
            .catch(error => {
                hideLoader();
                
                console.error('激活源时出错:', error);
                
                // 检查是否是认证错误
                if (error.message.includes('Not authenticated') || 
                    error.message.includes('401') || 
                    error.message.includes('auth') || 
                    error.message.includes('认证')) {
                    
                    // 处理认证错误
                    handleAuthError(error, () => {
                        // 认证成功后重新尝试激活
                        activateSource(sourceId);
                    });
                    return;
                }
                
                // 使用Toast显示错误
                const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                document.getElementById('toastMessage').textContent = `激活源失败: ${error.message}`;
                document.getElementById('notificationToast').classList.add('bg-danger', 'text-white');
                toast.show();
                
                // 5秒后恢复原来的样式
                setTimeout(() => {
                    document.getElementById('notificationToast').classList.remove('bg-danger', 'text-white');
                }, 5000);
                
                // Show error message
                document.getElementById('resultModalTitle').textContent = '错误';
                document.getElementById('resultModalBody').innerHTML = `
                    <div class="alert alert-danger">
                        <p><strong>激活源失败</strong></p>
                        <p>${error.message}</p>
                    </div>
                `;
                
                // 显示模态框
                new bootstrap.Modal(document.getElementById('resultModal')).show();
            });
        }
        
        function loadSources() {
            const sourceListContainer = document.getElementById('sourceListContainer');
            
            // Show loading indicator
            sourceListContainer.innerHTML = `
                <div class="text-center py-3">
                    <div class="loading"></div>
                    <p class="mt-2">加载源中...</p>
                </div>
            `;
            
            // Fetch sources from API
            fetch('/api/sources')
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.detail || '加载源失败');
                    });
                }
                return response.json();
            })
            .then(sources => {
                // Filter to show only custom sources
                const customSources = sources.filter(source => 
                    source.config && 
                    source.config.auto_generated
                );
                
                if (customSources.length === 0) {
                    sourceListContainer.innerHTML = `
                        <div class="alert alert-info">
                            <p>未找到自定义源。请先创建一个新源。</p>
                        </div>
                    `;
                    return;
                }
                
                // Render sources
                sourceListContainer.innerHTML = '';
                
                customSources.forEach(source => {
                    const sourceItem = document.createElement('a');
                    sourceItem.href = '#';
                    sourceItem.className = 'list-group-item list-group-item-action source-list-item';
                    sourceItem.dataset.sourceId = source.id;
                    
                    // Determine status badge class
                    let statusBadgeClass = 'bg-secondary';
                    if (source.status === 'active') statusBadgeClass = 'bg-success';
                    if (source.status === 'error') statusBadgeClass = 'bg-danger';
                    if (source.status === 'warning') statusBadgeClass = 'bg-warning text-dark';
                    
                    sourceItem.innerHTML = `
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="mb-0">${source.name}</h6>
                                <small class="text-muted">${source.id}</small>
                            </div>
                            <span class="badge ${statusBadgeClass}">${source.status}</span>
                        </div>
                    `;
                    
                    // Add click event
                    sourceItem.addEventListener('click', (e) => {
                        e.preventDefault();
                        
                        // Remove active class from all sources
                        document.querySelectorAll('.source-list-item').forEach(item => {
                            item.classList.remove('active');
                        });
                        
                        // Add active class to this source
                        sourceItem.classList.add('active');
                        
                        // Load source details
                        loadSourceDetails(source.id);
                        
                        // Enable action buttons
                        document.getElementById('testSelectedSourceBtn').disabled = false;
                        document.getElementById('activateSourceBtn').disabled = source.status === 'active';
                        document.getElementById('deactivateSourceBtn').disabled = source.status !== 'active';
                        document.getElementById('deleteSourceBtn').disabled = false;
                    });
                    
                    sourceListContainer.appendChild(sourceItem);
                });
            })
            .catch(error => {
                console.error('Error loading sources:', error);
                
                sourceListContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <p><strong>加载源失败</strong></p>
                        <p>${error.message}</p>
                        <button class="btn btn-sm btn-outline-primary mt-2" onclick="loadSources()">重试</button>
                    </div>
                `;
            });
        }
        
        function loadSourceDetails(sourceId) {
            // Show loading indicator in all tabs
            document.getElementById('sourceDetailsContainer').innerHTML = `
                <div class="text-center py-3">
                    <div class="loading"></div>
                    <p class="mt-2">加载详情中...</p>
                </div>
            `;
            
            document.getElementById('sourceStatsContainer').innerHTML = `
                <div class="text-center py-3">
                    <div class="loading"></div>
                    <p class="mt-2">加载统计信息中...</p>
                </div>
            `;
            
            document.getElementById('sourceConfigContainer').innerHTML = `
                <div class="text-center py-3">
                    <div class="loading"></div>
                    <p class="mt-2">加载配置中...</p>
                </div>
            `;
            
            document.getElementById('sourceTestResultContainer').innerHTML = `
                <div class="alert alert-info">
                    <p>点击"测试源"来运行测试并查看结果。</p>
                </div>
            `;
            
            // Set selected source
            selectedSource = sourceId;
            
            // Fetch source details from API
            Promise.all([
                fetch(`/api/sources/${sourceId}`).then(response => response.json()),
                fetch(`/api/sources/${sourceId}/stats`).then(response => response.json()).catch(() => ({}))
            ])
            .then(([sourceDetails, sourceStats]) => {
                // Display source details
                displaySourceDetails(sourceDetails);
                
                // Display source stats
                displaySourceStats(sourceStats);
                
                // Display source config
                displaySourceConfig(sourceDetails);
            })
            .catch(error => {
                console.error('Error loading source details:', error);
                
                document.getElementById('sourceDetailsContainer').innerHTML = `
                    <div class="alert alert-danger">
                        <p><strong>加载源详情失败</strong></p>
                        <p>${error.message}</p>
                    </div>
                `;
            });
        }
        
        function displaySourceDetails(source) {
            const container = document.getElementById('sourceDetailsContainer');
            
            container.innerHTML = `
                <div class="mb-3">
                    <h5>${source.name}</h5>
                    <p class="text-muted">${source.description || '无描述可用'}</p>
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <h6>基本信息</h6>
                        <table class="table table-sm">
                            <tr>
                                <th>ID</th>
                                <td>${source.id}</td>
                            </tr>
                            <tr>
                                <th>URL</th>
                                <td>${source.url ? `<a href="${source.url}" target="_blank">${source.url}</a>` : '<span class="text-danger">未设置</span> <small class="text-muted">(您需要在编辑详情中设置URL)</small>'}</td>
                            </tr>
                            <tr>
                                <th>类型</th>
                                <td>${source.type}</td>
                            </tr>
                            <tr>
                                <th>状态</th>
                                <td><span class="badge ${getStatusBadgeClass(source.status)}">${source.status}</span></td>
                            </tr>
                            <tr>
                                <th>类别</th>
                                <td>${source.category_id || '无'}</td>
                            </tr>
                        </table>
                    </div>
                    
                    <div class="col-md-6">
                        <h6>附加信息</h6>
                        <table class="table table-sm">
                            <tr>
                                <th>国家</th>
                                <td>${source.country || '未指定'}</td>
                            </tr>
                            <tr>
                                <th>语言</th>
                                <td>${source.language || '未指定'}</td>
                            </tr>
                            <tr>
                                <th>更新间隔</th>
                                <td>${formatSeconds(source.update_interval)}</td>
                            </tr>
                            <tr>
                                <th>缓存TTL</th>
                                <td>${formatSeconds(source.cache_ttl)}</td>
                            </tr>
                            <tr>
                                <th>创建时间</th>
                                <td>${formatDate(source.created_at)}</td>
                            </tr>
                            <tr>
                                <th>最后更新</th>
                                <td>${formatDate(source.updated_at)}</td>
                            </tr>
                        </table>
                    </div>
                </div>
                
                <div class="d-flex justify-content-end mt-3">
                    <button class="btn btn-outline-primary me-2" id="editDetailsBtn">
                        <i class="bi bi-pencil"></i> 编辑详情
                    </button>
                </div>
            `;
            
            // Add event listener for edit button
            document.getElementById('editDetailsBtn').addEventListener('click', () => {
                openEditModal(source);
            });
        }
        
        function displaySourceStats(stats) {
            const container = document.getElementById('sourceStatsContainer');
            
            if (!stats || Object.keys(stats).length === 0) {
                container.innerHTML = `
                    <div class="alert alert-info">
                        <p>暂无可用的统计信息。</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title">新闻数量</h6>
                                <p class="card-text display-6">${stats.news_count || 0}</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title">最后更新</h6>
                                <p class="card-text">${formatDate(stats.last_updated) || '从未'}</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="row mt-3">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title">错误数量</h6>
                                <p class="card-text display-6">${stats.error_count || 0}</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title">最后错误</h6>
                                <p class="card-text text-danger">${stats.last_error || '无'}</p>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        function displaySourceConfig(source) {
            const container = document.getElementById('sourceConfigContainer');
            
            if (!source.config) {
                container.innerHTML = `
                    <div class="alert alert-info">
                        <p>无可用的配置信息。</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = `
                <div class="mb-3">
                    <h6>源配置</h6>
                    <div id="configViewEditor"></div>
                </div>
                
                <div class="d-flex justify-content-end mt-3">
                    <button class="btn btn-outline-primary" id="editConfigBtn">
                        <i class="bi bi-pencil"></i> 编辑配置
                    </button>
                </div>
            `;
            
            // Initialize CodeMirror
            const configViewEditor = CodeMirror(document.getElementById('configViewEditor'), {
                value: JSON.stringify(source.config, null, 2),
                mode: { name: 'javascript', json: true },
                theme: 'monokai',
                lineNumbers: true,
                readOnly: true
            });
            
            // Add event listener for edit button
            document.getElementById('editConfigBtn').addEventListener('click', () => {
                openEditModal(source, 'config');
            });
        }
        
        function openEditModal(source, tab = 'details') {
            // Set up modal form
            document.getElementById('editSourceId').value = source.id;
            document.getElementById('editSourceName').value = source.name;
            document.getElementById('editSourceUrl').value = source.url;
            document.getElementById('editSourceCategory').value = source.category || 'news';
            document.getElementById('editSourceStatus').value = source.status;
            document.getElementById('editUpdateInterval').value = source.update_interval;
            document.getElementById('editCacheTtl').value = source.cache_ttl;
            
            // Set up config editor
            configEditor.setValue(JSON.stringify(source.config || {}, null, 2));
            
            // Show modal
            new bootstrap.Modal(document.getElementById('editSourceModal')).show();
            
            // Set up save button
            document.getElementById('saveSourceBtn').onclick = () => saveSource(source.id);
        }
        
        function saveSource(sourceId) {
            showLoader('保存更改中...');
            
            // Get form data
            const data = {
                name: document.getElementById('editSourceName').value,
                url: document.getElementById('editSourceUrl').value,
                category: document.getElementById('editSourceCategory').value,
                status: document.getElementById('editSourceStatus').value,
                update_interval: parseInt(document.getElementById('editUpdateInterval').value),
                cache_ttl: parseInt(document.getElementById('editCacheTtl').value)
            };
            
            // Try to parse JSON config
            try {
                data.config = JSON.parse(configEditor.getValue());
            } catch (error) {
                hideLoader();
                alert('JSON配置无效: ' + error.message);
                return;
            }
            
            // Update source
            fetch(`/api/sources/${sourceId}`, {
            fetch(`/api/sources/${sourceId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            })
            .then(response => {
                if (!response.ok) {
                    // 详细记录错误
                    console.error('更新源失败，状态码:', response.status, response.statusText);
                    return response.text().then(text => {
                        let errorDetail = '更新源失败';
                        try {
                            const errorJson = JSON.parse(text);
                            errorDetail = errorJson.detail || `API错误: ${response.status} ${response.statusText}`;
                            console.error('API错误详情:', errorJson);
                        } catch (e) {
                            // 如果不是JSON，直接使用文本
                            errorDetail = `API错误: ${response.status} ${response.statusText}. ${text}`;
                            console.error('API响应内容:', text);
                        }
                        throw new Error(errorDetail);
                    });
                }
                return response.json();
            })
            .then(result => {
                hideLoader();
                
                // 显示成功提示
                const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                document.getElementById('toastMessage').textContent = `源 ${data.name} 更新成功！`;
                toast.show();
                
                if (error.message.includes('Not authenticated') || 
                    error.message.includes('401') || 
                    error.message.includes('auth') || 
                    error.message.includes('认证')) {
                    
                    // 处理认证错误
                    handleAuthError(error, () => {
                        // 认证成功后重新尝试保存
                        saveSource(sourceId);
                    });
                    return;
                }
                
                // 使用Toast显示错误，而不是alert
                const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                document.getElementById('toastMessage').textContent = `更新源失败: ${error.message}`;
                document.getElementById('notificationToast').classList.add('bg-danger', 'text-white');
                toast.show();
                
                // 5秒后恢复原来的样式
                setTimeout(() => {
                    document.getElementById('notificationToast').classList.remove('bg-danger', 'text-white');
                }, 5000);
            });
        }
        
        // Helper functions for formatting
        function formatSeconds(seconds) {
            if (!seconds) return '未指定';
            
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            
            let result = '';
            if (hours > 0) result += `${hours}小时 `;
            if (minutes > 0) result += `${minutes}分钟 `;
            if (secs > 0 || result === '') result += `${secs}秒`;
            
            return result;
        }
        
        function formatDate(dateStr) {
            if (!dateStr) return '不可用';
            
            const date = new Date(dateStr);
            return date.toLocaleString();
        }
        
        function getStatusBadgeClass(status) {
            switch (status) {
                case 'active': return 'bg-success';
                case 'error': return 'bg-danger';
                case 'warning': return 'bg-warning text-dark';
                case 'inactive': return 'bg-secondary';
                default: return 'bg-secondary';
            }
        }
        
            .then(result => {
                hideLoader();
                
            fetch(`/api/sources/${sourceId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.detail || '删除源失败');
                    });
                }
                return response.json();
            })
                        <p>从列表中选择一个源以查看其统计信息。</p>
                    </div>
                `;
                
                document.getElementById('sourceConfigContainer').innerHTML = `
                    <div class="alert alert-info">
                        <p>从列表中选择一个源以查看和编辑其配置。</p>
                    </div>
                `;
                
                document.getElementById('sourceTestResultContainer').innerHTML = `
                    <div class="alert alert-info">
                        <p>点击"测试源"来运行测试并查看结果。</p>
                    </div>
                `;
                
                // Disable action buttons
                document.getElementById('testSelectedSourceBtn').disabled = true;
                document.getElementById('activateSourceBtn').disabled = true;
                document.getElementById('deactivateSourceBtn').disabled = true;
                document.getElementById('deleteSourceBtn').disabled = true;
                
                // Show notification
                alert(`源 "${sourceId}" 已成功删除`);
            })
            .catch(error => {
                hideLoader();
                
                alert('删除源失败: ' + error.message);
            });
        }
        
        // 添加HTML分析函数
        function analyzeHtml() {
            showLoader('分析HTML结构中...');
            
            try {
                const htmlContent = htmlEditor.getValue();
                if (!htmlContent || htmlContent.trim().length < 100) {
                    alert('请先粘贴有效的HTML内容');
                    hideLoader();
                    return;
                }
                
                // 创建一个临时DOM解析器
                const parser = new DOMParser();
                const htmlDoc = parser.parseFromString(htmlContent, 'text/html');
                
                // 存储发现的选择器
                const foundSelectors = {
                    item: [],
                    title: [],
                    link: [],
                    date: [],
                    summary: [],
                    content: []
                };
                
                // 1. 查找可能的条目选择器 - 增强版
                const possibleItemSelectors = [
                    // 常见的文章容器
                    'article', '.article', '.news-item', '.post', '.entry', 
                    // 常见的列表项
                    '.item', 'li.news', '.news-card', '.card', '.list-item',
                    // 常见的新闻网格项
                    '.grid-item', '.news-block', '.news-cell', '.news-box',
                    // 定义列表结构
                    'dl', 'dl.newsDl', '.newsDl', 'dl.clearfix',
                    // 通用类选择器
                    '[class*="news"]', '[class*="article"]', '[class*="post"]',
                    // 直接子元素模式
                    '.liveNews > dl', '.newsList > li', '.newsBox > div'
                ];
                
                let bestItemSelector = '';
                let maxItems = 0;
                
                possibleItemSelectors.forEach(selector => {
                    try {
                        const items = htmlDoc.querySelectorAll(selector);
                        if (items.length > 1 && items.length > maxItems) {
                            // 如果找到多个项目，很可能是新闻条目
                            maxItems = items.length;
                            bestItemSelector = selector;
                            foundSelectors.item.push({
                                selector: selector,
                                count: items.length
                            });
                        }
                    } catch (e) {
                        // 忽略无效选择器
                    }
                });
                
                // 2. 特殊处理：如果没有找到明确的条目选择器，尝试分析更复杂的结构
                if (maxItems <= 3) {
                    // 尝试查找通用重复模式
                    const containers = [
                        '.liveNews', '.newsBox', '.newsList', '.newsContainer'
                    ];
                    
                    for (const container of containers) {
                        try {
                            const parentElement = htmlDoc.querySelector(container);
                            if (parentElement) {
                                // 查找具有重复结构的子元素
                                const childElements = parentElement.children;
                                if (childElements.length > 3) {
                                    // 找到一个可能包含多条新闻的父容器
                                    const containerTagName = parentElement.tagName.toLowerCase();
                                    const childrenTagNames = Array.from(childElements).map(el => el.tagName.toLowerCase());
                                    
                                    // 获取最常见的子元素类型
                                    const mostCommonChildTag = childrenTagNames.sort((a, b) => 
                                        childrenTagNames.filter(t => t === a).length - 
                                        childrenTagNames.filter(t => t === b).length
                                    ).pop();
                                    
                                    if (mostCommonChildTag) {
                                        const selector = `${container} > ${mostCommonChildTag}`;
                                        const items = htmlDoc.querySelectorAll(selector);
                                        
                                        if (items.length > maxItems) {
                                            maxItems = items.length;
                                            bestItemSelector = selector;
                                            foundSelectors.item.push({
                                                selector: selector,
                                                count: items.length
                                            });
                                        }
                                    }
                                }
                            }
                        } catch (e) {
                            // 忽略错误，继续查找
                        }
                    }
                }
                
                // 3. 根据找到的最佳条目选择器，尝试找出其中的标题、链接等 - 增强版
                if (bestItemSelector && maxItems > 0) {
                    const items = htmlDoc.querySelectorAll(bestItemSelector);
                    const firstItem = items[0];
                    const secondItem = items.length > 1 ? items[1] : null;
                    
                    // 检查是否是dl/dt/dd结构
                    const isDlStructure = bestItemSelector.includes('dl') || firstItem.tagName.toLowerCase() === 'dl';
                    
                    if (isDlStructure) {
                        // 对于dl/dt/dd结构的特殊处理
                        
                        // 1. 查找标题 - 通常在dd里面的a标签或p>a结构中
                        const titleSelectors = [
                            'dd a', 'dd > p > a', 'a', 'p > a', 'dd'
                        ];
                        
                        for (const selector of titleSelectors) {
                            try {
                                const titleElem = firstItem.querySelector(selector);
                                if (titleElem && titleElem.textContent.trim()) {
                                    foundSelectors.title.push({
                                        selector: selector,
                                        text: titleElem.textContent.trim().substring(0, 50)
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                        
                        // 2. 查找链接 - 通常在dd里面的a标签
                        const linkSelectors = [
                            'dd a', 'dd > p > a', 'a'
                        ];
                        
                        for (const selector of linkSelectors) {
                            try {
                                const linkElem = firstItem.querySelector(selector);
                                if (linkElem && linkElem.getAttribute('href')) {
                                    foundSelectors.link.push({
                                        selector: selector,
                                        href: linkElem.getAttribute('href')
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                        
                        // 3. 查找日期 - 通常在dt标签或特定的日期容器中
                        const dateSelectors = [
                            'dt', '.timeBox', '.date', '.time', 'time'
                        ];
                        
                        // 首先尝试找到父级的日期元素
                        const parentNode = firstItem.parentNode;
                        if (parentNode) {
                            for (const selector of dateSelectors) {
                                try {
                                    const dateElements = parentNode.querySelectorAll(selector);
                                    if (dateElements.length > 0) {
                                        for (const dateElem of dateElements) {
                                            const dateText = dateElem.textContent.trim();
                                            if (dateText && isLikelyDateString(dateText)) {
                                                foundSelectors.date.push({
                                                    selector: `.liveNews > ${selector}`,
                                                    text: dateText,
                                                    isParent: true
                                                });
                                            }
                                        }
                                    }
                                } catch (e) {
                                    // 忽略错误，继续查找
                                }
                            }
                        }
                        
                        // 然后尝试在条目内找日期
                        for (const selector of dateSelectors) {
                            try {
                                const dateElem = firstItem.querySelector(selector);
                                if (dateElem && dateElem.textContent.trim()) {
                                    const dateText = dateElem.textContent.trim();
                                    foundSelectors.date.push({
                                        selector: selector,
                                        text: dateText
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                        
                    } else {
                        // 普通结构的处理
                        
                        // 查找标题
                        const possibleTitleSelectors = [
                            'h1', 'h2', 'h3', 'h4', '.title', '.headline', '.news-title',
                            '[class*="title"]', '[class*="headline"]', '.subject', 'strong',
                            'a', 'p > a', '.link-title', 'p.title', 'p'
                        ];
                        
                        for (const selector of possibleTitleSelectors) {
                            try {
                                const titleElem = firstItem.querySelector(selector);
                                if (titleElem && titleElem.textContent.trim()) {
                                    foundSelectors.title.push({
                                        selector: selector,
                                        text: titleElem.textContent.trim().substring(0, 50)
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                        
                        // 查找链接
                        const possibleLinkSelectors = [
                            'a', 'a.link', '.link a', 'h3 a', 'h2 a', '.title a',
                            '.headline a', '[class*="title"] a', 'p > a', 'p a'
                        ];
                        
                        for (const selector of possibleLinkSelectors) {
                            try {
                                const linkElem = firstItem.querySelector(selector);
                                if (linkElem && linkElem.getAttribute('href')) {
                                    foundSelectors.link.push({
                                        selector: selector,
                                        href: linkElem.getAttribute('href')
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                        
                        // 查找日期
                        const possibleDateSelectors = [
                            'time', '.date', '.time', '.timestamp', '.pubDate',
                            '[class*="date"]', '[class*="time"]', '.meta time', '.info time'
                        ];
                        
                        for (const selector of possibleDateSelectors) {
                            try {
                                const dateElem = firstItem.querySelector(selector);
                                if (dateElem && dateElem.textContent.trim()) {
                                    foundSelectors.date.push({
                                        selector: selector,
                                        text: dateElem.textContent.trim()
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                        
                        // 查找摘要
                        const possibleSummarySelectors = [
                            'p', '.summary', '.excerpt', '.description', '.desc',
                            '[class*="summary"]', '[class*="excerpt"]', '[class*="desc"]'
                        ];
                        
                        for (const selector of possibleSummarySelectors) {
                            try {
                                const summaryElem = firstItem.querySelector(selector);
                                if (summaryElem && summaryElem.textContent.trim()) {
                                    // 排除可能是标题或日期的元素
                                    if (foundSelectors.title.some(title => title.text === summaryElem.textContent.trim()) ||
                                        foundSelectors.date.some(date => date.text === summaryElem.textContent.trim())) {
                                        continue;
                                    }
                                    
                                    foundSelectors.summary.push({
                                        selector: selector,
                                        text: summaryElem.textContent.trim().substring(0, 100)
                                    });
                                }
                            } catch (e) {
                                // 忽略无效选择器
                            }
                        }
                    }
                    
                    // 针对所有结构 - 查找内容（通常在详情页，但有时会在列表页面）
                    const possibleContentSelectors = [
                        '.content', '.article-body', '.article-content', '.text', '.body',
                        '[class*="content"]', '[class*="body"]', 'dd > p'
                    ];
                    
                    for (const selector of possibleContentSelectors) {
                        try {
                            const contentElem = firstItem.querySelector(selector);
                            if (contentElem && contentElem.textContent.trim()) {
                                // 排除可能是标题、摘要或日期的元素
                                if (foundSelectors.title.some(title => title.text === contentElem.textContent.trim()) ||
                                    foundSelectors.summary.some(summary => summary.text === contentElem.textContent.trim()) ||
                                    foundSelectors.date.some(date => date.text === contentElem.textContent.trim())) {
                                    continue;
                                }
                                
                                foundSelectors.content.push({
                                    selector: selector,
                                    text: contentElem.textContent.trim().substring(0, 100)
                                });
                            }
                        } catch (e) {
                            // 忽略无效选择器
                        }
                    }
                }
                
                // 在表单中设置找到的选择器
                if (foundSelectors.item.length > 0) {
                    document.getElementById('itemSelector').value = foundSelectors.item[0].selector;
                }
                
                if (foundSelectors.title.length > 0) {
                    document.getElementById('titleSelector').value = foundSelectors.title[0].selector;
                }
                
                if (foundSelectors.link.length > 0) {
                    document.getElementById('linkSelector').value = foundSelectors.link[0].selector;
                }
                
                if (foundSelectors.date.length > 0) {
                    // 如果日期在父元素，需要特殊处理
                    const dateSelector = foundSelectors.date[0];
                    if (dateSelector.isParent) {
                        document.getElementById('dateSelector').value = dateSelector.selector;
                    } else {
                        document.getElementById('dateSelector').value = foundSelectors.date[0].selector;
                    }
                }
                
                if (foundSelectors.summary.length > 0) {
                    document.getElementById('summarySelector').value = foundSelectors.summary[0].selector;
                }
                
                if (foundSelectors.content.length > 0) {
                    document.getElementById('contentSelector').value = foundSelectors.content[0].selector;
                }
                
                // 显示分析结果
                hideLoader();
                
                // 构建结果消息
                let resultMessage = '<div class="alert alert-success"><p><strong>HTML分析完成！</strong></p>';
                resultMessage += `<p>找到 ${maxItems} 个可能的新闻条目。</p>`;
                
                if (foundSelectors.item.length === 0) {
                    resultMessage += '<p class="text-warning">未能找到合适的条目选择器，请手动填写。</p>';
                }
                
                if (foundSelectors.title.length === 0) {
                    resultMessage += '<p class="text-warning">未能找到合适的标题选择器，请手动填写。</p>';
                }
                
                resultMessage += '</div>';
                
                // 如果有多个选择器选项，提供选择
                if (foundSelectors.item.length > 1 || foundSelectors.title.length > 1 || 
                    foundSelectors.link.length > 1 || foundSelectors.summary.length > 1) {
                    resultMessage += '<div class="mb-4"><h5>其他可能的选择器：</h5>';
                    
                    if (foundSelectors.item.length > 1) {
                        resultMessage += '<div class="mb-3"><h6>条目选择器：</h6><ul class="list-group">';
                        foundSelectors.item.forEach((item, index) => {
                            resultMessage += `<li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${item.selector}</span>
                                <span class="badge bg-primary">${item.count} 个条目</span>
                                <button class="btn btn-sm btn-outline-primary use-selector" 
                                    data-target="itemSelector" data-value="${item.selector}">使用</button>
                            </li>`;
                        });
                        resultMessage += '</ul></div>';
                    }
                    
                    if (foundSelectors.title.length > 1) {
                        resultMessage += '<div class="mb-3"><h6>标题选择器：</h6><ul class="list-group">';
                        foundSelectors.title.forEach((item, index) => {
                            resultMessage += `<li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${item.selector}</span>
                                <small class="text-muted">${item.text}</small>
                                <button class="btn btn-sm btn-outline-primary use-selector" 
                                    data-target="titleSelector" data-value="${item.selector}">使用</button>
                            </li>`;
                        });
                        resultMessage += '</ul></div>';
                    }
                    
                    if (foundSelectors.link.length > 1) {
                        resultMessage += '<div class="mb-3"><h6>链接选择器：</h6><ul class="list-group">';
                        foundSelectors.link.forEach((item, index) => {
                            resultMessage += `<li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${item.selector}</span>
                                <small class="text-muted">${item.href}</small>
                                <button class="btn btn-sm btn-outline-primary use-selector" 
                                    data-target="linkSelector" data-value="${item.selector}">使用</button>
                            </li>`;
                        });
                        resultMessage += '</ul></div>';
                    }
                    
                    if (foundSelectors.date.length > 1) {
                        resultMessage += '<div class="mb-3"><h6>日期选择器：</h6><ul class="list-group">';
                        foundSelectors.date.forEach((item, index) => {
                            resultMessage += `<li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${item.selector}</span>
                                <small class="text-muted">${item.text}</small>
                                <button class="btn btn-sm btn-outline-primary use-selector" 
                                    data-target="dateSelector" data-value="${item.selector}">使用</button>
                            </li>`;
                        });
                        resultMessage += '</ul></div>';
                    }
                    
                    if (foundSelectors.summary.length > 1) {
                        resultMessage += '<div class="mb-3"><h6>摘要选择器：</h6><ul class="list-group">';
                        foundSelectors.summary.forEach((item, index) => {
                            resultMessage += `<li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${item.selector}</span>
                                <small class="text-muted">${item.text}</small>
                                <button class="btn btn-sm btn-outline-primary use-selector" 
                                    data-target="summarySelector" data-value="${item.selector}">使用</button>
                            </li>`;
                        });
                        resultMessage += '</ul></div>';
                    }
                    
                    resultMessage += '</div>';
                }
                
                document.getElementById('resultModalTitle').textContent = 'HTML分析结果';
                document.getElementById('resultModalBody').innerHTML = resultMessage;
                
                // 显示对话框前移除所有已有的使用按钮事件，防止重复绑定
                document.querySelectorAll('.use-selector').forEach(button => {
                    button.removeEventListener('click', selectorButtonClickHandler);
                });
                
                // 确保模态框完全显示后再绑定事件
                const resultModal = new bootstrap.Modal(document.getElementById('resultModal'));
                
                // 改用模态框事件监听，确保在显示后绑定
                document.getElementById('resultModal').addEventListener('shown.bs.modal', function() {
                    // 为所有"使用"按钮添加点击事件
                    document.querySelectorAll('.use-selector').forEach(button => {
                        // 移除可能存在的旧事件监听器
                        button.removeEventListener('click', selectorButtonClickHandler);
                        // 添加新的事件监听器
                        button.addEventListener('click', selectorButtonClickHandler);
                    });
                }, { once: true }); // 只监听一次事件，避免重复绑定
                
                // 显示模态框
                resultModal.show();
            } catch (error) {
                hideLoader();
                console.error('HTML分析出错:', error);
                alert('分析HTML时出错: ' + error.message);
            }
        }
        
        // 辅助函数：判断字符串是否可能是日期
        function isLikelyDateString(text) {
            // 检查是否包含日期格式
            return /\d{1,4}[-\/\.年]\d{1,2}[-\/\.月]\d{1,2}/.test(text) || // 年-月-日格式
                  /\d{1,2}[-\/\.]\d{1,2}[-\/\.]\d{2,4}/.test(text) || // 日-月-年格式
                  /\d{1,2}:\d{1,2}/.test(text) || // 时:分格式
                  /\d{4}年\d{1,2}月\d{1,2}日/.test(text); // 中文日期格式
        }
        
        // 定义选择器按钮的点击处理函数，避免匿名函数重复定义
        function selectorButtonClickHandler() {
            const targetId = this.getAttribute('data-target');
            const value = this.getAttribute('data-value');
            document.getElementById(targetId).value = value;
            // 可选：在使用后高亮显示按钮，提供视觉反馈
            this.classList.remove('btn-outline-primary');
            this.classList.add('btn-primary');
            this.textContent = '已使用';
        }
        
        // 高级HTML格式化函数
        function formatHtmlContent(html) {
            // 移除多余的空白和空行
            html = html.trim();
            
            // 使用正则表达式进行初步处理
            // 将多个空格替换为单个空格
            html = html.replace(/\s{2,}/g, ' ');
            
            // 处理自闭合标签
            html = html.replace(/<([^\/][^>]*?)\/>/g, '<$1></$1>');
            
            // 防止一些特殊情况下标签之间的文本被错误地缩进
            html = html.replace(/>\s+</g, '> <');
            
            // 特别处理常见的新闻结构
            // 特殊处理liveNews、newsDl等特定类
            const specialClasses = ['liveNews', 'newsDl', 'newsBox', 'newsList', 'clearfix'];
            for (const className of specialClasses) {
                // 添加注释标记重要结构
                html = html.replace(new RegExp(`class=(["\'])[^"\']*${className}[^"\']*\\1`, 'gi'), 
                                  (match) => `${match} data-important="true"`);
            }
            
            let formatted = '';
            let indent = '';
            
            // 处理每个字符
            const len = html.length;
            let inTag = false;
            let inTagName = false;
            let tagName = '';
            let currentTagContent = '';
            let inComment = false;
            let inQuote = false; 
            let quoteChar = '';
            let lastNonSpaceChar = '';
            
            for (let i = 0; i < len; i++) {
                const char = html.charAt(i);
                const nextChar = i < len - 1 ? html.charAt(i + 1) : '';
                const prevChar = i > 0 ? html.charAt(i - 1) : '';
                
                // 更新最后一个非空格字符
                if (char !== ' ' && char !== '\n' && char !== '\t') {
                    lastNonSpaceChar = char;
                }
                
                // 处理注释
                if (char === '<' && nextChar === '!' && i + 3 < len && html.charAt(i + 2) === '-' && html.charAt(i + 3) === '-') {
                    inComment = true;
                    formatted += '\n' + indent + '<!-- ';
                    i += 3; // 跳过 "!--"
                    continue;
                }
                
                if (inComment) {
                    if (char === '-' && nextChar === '-' && i + 2 < len && html.charAt(i + 2) === '>') {
                        inComment = false;
                        formatted += ' -->';
                        i += 2; // 跳过 "->"
                        continue;
                    }
                    formatted += char;
                    continue;
                }
                
                // 处理引号
                if (inTag && (char === '"' || char === "'") && prevChar !== '\\') {
                    if (!inQuote) {
                        inQuote = true;
                        quoteChar = char;
                    } else if (char === quoteChar) {
                        inQuote = false;
                    }
                    formatted += char;
                    continue;
                }
                
                // 在引号内保持原样
                if (inQuote) {
                    formatted += char;
                    continue;
                }
                
                // 处理标签开始
                if (char === '<' && !inTag) {
                    inTag = true;
                    inTagName = true;
                    tagName = '';
                    currentTagContent = '<';
                    
                    // 处理结束标签缩进
                    if (nextChar === '/') {
                        if (indent.length > 0) {
                            indent = indent.substring(2);
                        }
                        formatted += '\n' + indent;
                    } else {
                        // 为非内联元素添加换行和缩进
                        // 特殊处理dl/dd/dt标签，使其对齐更美观
                        const nextTag = getTagName(html.substring(i));
                        const isSpecial = nextTag === 'dl' || nextTag === 'dt' || nextTag === 'dd';
                        
                        if ((isSpecial || !isInlineElement(nextTag)) && lastNonSpaceChar !== '>') {
                            formatted += '\n' + indent;
                        }
                    }
                    
                    continue;
                }
                
                // 收集标签名称
                if (inTag && inTagName && char !== ' ' && char !== '>' && char !== '/') {
                    tagName += char.toLowerCase();
                    currentTagContent += char;
                } else if (inTagName && inTag) {
                    inTagName = false;
                    currentTagContent += char;
                } else if (inTag) {
                    currentTagContent += char;
                }
                
                // 处理标签结束
                if (inTag && char === '>') {
                    inTag = false;
                    formatted += currentTagContent;
                    
                    // 特殊处理data-important属性
                    if (currentTagContent.includes('data-important="true"')) {
                        // 在重要结构前后添加空行
                        if (!currentTagContent.startsWith('</')) {
                            formatted += '\n' + indent + '<!-- 重要结构: ' + tagName + ' -->';
                        }
                    }
                    
                    // 为非内联元素和非自闭合标签添加缩进
                    if (!currentTagContent.includes('</') && !currentTagContent.includes('/>') && 
                        !isInlineElement(tagName) && nextChar !== '<') {
                        indent += '  ';
                    }
                    
                    continue;
                }
                
                // 只有在不在标签内时才添加字符，因为我们已经在处理标签结束时添加了完整的标签内容
                if (!inTag) {
                    formatted += char;
                }
            }
            
            // 最终清理
            // 删除首行的空行
            formatted = formatted.replace(/^\s*\n/, '');
            // 合并多个空行
            formatted = formatted.replace(/\n\s*\n/g, '\n');
            // 移除辅助属性
            formatted = formatted.replace(/data-important="true"/g, '');
            
            return formatted;
        }
        
        // 辅助函数：检查是否为内联元素
        function isInlineElement(tagName) {
            const inlineElements = ['a', 'abbr', 'acronym', 'b', 'bdo', 'big', 'br', 'button', 'cite', 'code', 
                                   'dfn', 'em', 'i', 'img', 'input', 'kbd', 'label', 'map', 'object', 'output', 
                                   'q', 'samp', 'script', 'select', 'small', 'span', 'strong', 'sub', 'sup', 
                                   'textarea', 'time', 'tt', 'var'];
            
            return inlineElements.includes(tagName);
        }
        
        // 辅助函数：从标签字符串中提取标签名
        function getTagName(tagString) {
            const match = tagString.match(/<\/?([a-z][a-z0-9]*)/i);
            return match ? match[1].toLowerCase() : '';
        }
        
        // 添加HTML格式化函数
        function formatHtml() {
            showLoader('格式化HTML中...');
            
            try {
                const htmlContent = htmlEditor.getValue();
                if (!htmlContent || htmlContent.trim().length === 0) {
                    showToast('警告', '请先粘贴HTML内容', 'warning');
                    hideLoader();
                    return;
                }
                
                // 创建一个格式化后的HTML字符串
                let formattedHtml = '';
                
                try {
                    // 尝试使用更高级的格式化方法
                    formattedHtml = formatHtmlContent(htmlContent);
                } catch (err) {
                    console.error('高级格式化失败，回退到基础格式化', err);
                    
                    // 如果高级格式化失败，回退到基础格式化
                    try {
                        // 使用DOMParser解析HTML
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(htmlContent, 'text/html');
                        
                        // 使用XMLSerializer重新序列化
                        const serializer = new XMLSerializer();
                        formattedHtml = serializer.serializeToString(doc);
                        
                        // 简单清理
                        formattedHtml = formattedHtml.replace(/><(?!\/)/g, '>\n<');
                    } catch (basicErr) {
                        // 如果两种方法都失败，保持原始内容
                        console.error('基础格式化失败', basicErr);
                        formattedHtml = htmlContent;
                        
                        showToast('错误', '格式化失败，HTML结构可能有问题', 'danger');
                        hideLoader();
                        return;
                    }
                }
                
                // 更新编辑器内容
                htmlEditor.setValue(formattedHtml);
                
                // 通知用户格式化完成
                hideLoader();
                showToast('成功', 'HTML已成功格式化！', 'success');
            } catch (error) {
                hideLoader();
                console.error('HTML格式化出错:', error);
                showToast('错误', '格式化HTML时出错: ' + error.message, 'danger');
            }
        }
        
        // 显示Toast消息
        function showToast(title, message, type = 'info') {
            // 创建toast容器，如果不存在
            let toastContainer = document.getElementById('toastContainer');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toastContainer';
                toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
                document.body.appendChild(toastContainer);
            }
            
            // 创建随机ID
            const toastId = 'toast-' + Math.random().toString(36).substr(2, 9);
            
            // 创建toast元素
            const toastHtml = `
                <div class="toast" id="${toastId}" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header bg-${type} text-white">
                        <strong class="me-auto">${title}</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `;
            
            // 添加toast到容器
            toastContainer.insertAdjacentHTML('beforeend', toastHtml);
            
            // 初始化并显示toast
            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, {
                delay: 3000,
                autohide: true
            });
            
            toast.show();
            
            // 自动移除toast元素
            toastElement.addEventListener('hidden.bs.toast', function() {
                toastElement.remove();
            });
        }
        
        // 格式化并在模态框中显示HTML
        function formatAndDisplayHtml() {
            showLoader('格式化并准备HTML可视化...');
            
            try {
                const htmlContent = htmlEditor.getValue();
                if (!htmlContent || htmlContent.trim().length === 0) {
                    showToast('警告', '请先粘贴HTML内容', 'warning');
                    hideLoader();
                    return;
                }
                
                // 首先格式化HTML
                let formattedHtml = formatHtmlContent(htmlContent);
                
                // 更新编辑器的值
                htmlEditor.setValue(formattedHtml);
                
                // 准备可视化效果
                const visualizedHtml = visualizeHtml(formattedHtml);
                
                // 在模态框中显示可视化HTML
                document.getElementById('htmlVisualization').innerHTML = visualizedHtml;
                
                // 显示模态框
                new bootstrap.Modal(document.getElementById('htmlDisplayModal')).show();
                
                hideLoader();
            } catch (error) {
                hideLoader();
                console.error('处理HTML出错:', error);
                showToast('错误', '处理HTML时出错: ' + error.message, 'danger');
            }
        }
        
        // 创建HTML可视化效果
        function visualizeHtml(html) {
            // 基本的语法高亮和格式化
            let visualized = html
                // 添加行号
                .split('\n')
                .map((line, index) => {
                    // 特殊处理特定元素的样式
                    let processedLine = escapeHtml(line)
                        // 标签
                        .replace(/(&lt;\/?)([a-zA-Z][a-zA-Z0-9]*)/g, '<span class="tag-name">$2</span>')
                        // 属性名
                        .replace(/([a-zA-Z][a-zA-Z0-9-_]*)=(&quot;|&#39;)/g, '<span class="attribute-name">$1</span>=<span class="attribute-value">$2')
                        // 属性值
                        .replace(/(&quot;|&#39;)/g, '<span class="attribute-value">$1</span>')
                        // 注释
                        .replace(/&lt;!--(.*)--&gt;/g, '<span class="html-comment">&lt;!--$1--&gt;</span>');
                    
                    // 突出显示特定的结构
                    if (processedLine.includes('liveNews') || processedLine.includes('newsDl') || 
                        processedLine.includes('clearfix') || processedLine.includes('重要结构')) {
                        return `<div class="d-flex hover-highlight" style="background-color: rgba(255, 240, 200, 0.5);">
                                    <div class="me-3 text-muted" style="min-width: 40px; text-align: right;">${index + 1}</div>
                                    <div style="font-weight: bold;">${processedLine}</div>
                                </div>`;
                    }
                    
                    // 为dt和dd标签添加视觉辅助
                    if (processedLine.includes('<span class="tag-name">dt</span>') || 
                        processedLine.includes('<span class="tag-name">dd</span>')) {
                        return `<div class="d-flex hover-highlight" style="background-color: rgba(200, 230, 255, 0.3);">
                                    <div class="me-3 text-muted" style="min-width: 40px; text-align: right;">${index + 1}</div>
                                    <div>${processedLine}</div>
                                </div>`;
                    }
                    
                    // 常规行
                    return `<div class="d-flex hover-highlight">
                                <div class="me-3 text-muted" style="min-width: 40px; text-align: right;">${index + 1}</div>
                                <div>${processedLine}</div>
                            </div>`;
                })
                .join('');
            
            return visualized;
        }
        
        // 辅助函数：转义HTML特殊字符
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        // 添加API健康检查函数
        function checkApiHealth() {
            // 创建模态框
            const modal = document.createElement('div');
            modal.className = 'modal fade';
            modal.id = 'apiHealthModal';
            modal.setAttribute('tabindex', '-1');
            modal.setAttribute('aria-hidden', 'true');
            
            modal.innerHTML = `
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">API健康检查</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="alert alert-info">
                                <p>正在检查API端点可用性...</p>
                                <div class="progress">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%"></div>
                                </div>
                            </div>
                            <div id="apiHealthResults"></div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                            <button type="button" class="btn btn-primary" id="rerunApiCheck">重新检查</button>
                        </div>
                    </div>
                </div>
            `;
            
            // 添加到页面
            document.body.appendChild(modal);
            
            // 显示模态框
            const modalInstance = new bootstrap.Modal(document.getElementById('apiHealthModal'));
            modalInstance.show();
            
            // 添加重新检查按钮事件
            document.getElementById('rerunApiCheck').addEventListener('click', function() {
                document.querySelector('#apiHealthModal .modal-body').innerHTML = `
                    <div class="alert alert-info">
                        <p>正在检查API端点可用性...</p>
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%"></div>
                        </div>
                    </div>
                    <div id="apiHealthResults"></div>
                `;
                runApiChecks();
            });
            
            // 执行API检查
            runApiChecks();
        }
        
        function runApiChecks() {
            const resultsContainer = document.getElementById('apiHealthResults');
            
            // 要测试的端点列表
            const endpoints = [
                { name: 'API信息', url: '/api-info', method: 'GET' },
                { name: '源类型列表', url: '/api/source-test/source-types', method: 'GET' },
                { name: '测试源示例', url: '/api/source-test/test-source/test', method: 'GET' },
                { name: '创建源端点', url: '/api/source-test/create-custom-source', method: 'POST', body: {}, skipContent: true }
            ];
            
            // 创建结果表格
            resultsContainer.innerHTML = `
                <h5>API端点状态:</h5>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>端点名称</th>
                            <th>URL</th>
                            <th>状态</th>
                            <th>响应时间</th>
                            <th>操作</th>
                        </tr>
                    </thead>
                    <tbody id="apiCheckResults">
                        ${endpoints.map((endpoint, index) => `
                            <tr id="apiCheck-${index}">
                                <td>${endpoint.name}</td>
                                <td><code>${endpoint.url}</code></td>
                                <td><span class="badge bg-secondary">待检查</span></td>
                                <td>-</td>
                                <td><button class="btn btn-sm btn-primary" disabled>详情</button></td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
                <div id="apiCheckDetails" class="mt-3"></div>
            `;
            
            // 逐个检查端点
            endpoints.forEach((endpoint, index) => {
                setTimeout(() => {
                    checkEndpoint(endpoint, index);
                }, index * 500); // 错开请求时间
            });
        }
        
        function checkEndpoint(endpoint, index) {
            const row = document.getElementById(`apiCheck-${index}`);
            const cells = row.querySelectorAll('td');
            const startTime = performance.now();
            
            // 更新状态为检查中
            cells[2].innerHTML = '<span class="badge bg-info">检查中...</span>';
            
            const options = {
                method: endpoint.method
            };
            
            if (endpoint.method === 'POST') {
                options.headers = {
                    'Content-Type': 'application/json'
                };
                options.body = JSON.stringify(endpoint.body || {});
            }
            
            fetch(endpoint.url, options)
                .then(response => {
                    const endTime = performance.now();
                    const responseTime = (endTime - startTime).toFixed(2);
                    cells[3].textContent = `${responseTime} ms`;
                    
                    // 更新状态
                    if (response.ok) {
                        cells[2].innerHTML = '<span class="badge bg-success">可用</span>';
                        cells[4].querySelector('button').disabled = false;
                        
                        // 添加详情按钮事件
                        cells[4].querySelector('button').addEventListener('click', () => {
                            showEndpointDetails(endpoint, response, responseTime);
                        });
                        
                        return response.text();
                    } else {
                        cells[2].innerHTML = `<span class="badge bg-danger">错误 ${response.status}</span>`;
                        cells[4].querySelector('button').disabled = false;
                        
                        // 添加详情按钮事件
                        cells[4].querySelector('button').addEventListener('click', () => {
                            showEndpointDetails(endpoint, response, responseTime);
                        });
                        
                        return response.text();
                    }
                })
                .catch(error => {
                    const endTime = performance.now();
                    const responseTime = (endTime - startTime).toFixed(2);
                    cells[3].textContent = `${responseTime} ms`;
                    
                    // 更新状态
                    cells[2].innerHTML = '<span class="badge bg-danger">无法连接</span>';
                    cells[4].querySelector('button').disabled = false;
                    
                    // 添加详情按钮事件
                    cells[4].querySelector('button').addEventListener('click', () => {
                        document.getElementById('apiCheckDetails').innerHTML = `
                            <div class="alert alert-danger">
                                <h5>错误详情: ${endpoint.url}</h5>
                                <p>${error.message}</p>
                            </div>
                        `;
                    });
                });
        }
        
        function showEndpointDetails(endpoint, response, responseTime) {
            const detailsContainer = document.getElementById('apiCheckDetails');
            
            // 将响应克隆一份，因为response.text()只能消费一次
            response.clone().text().then(text => {
                let formattedContent = '<pre>无内容</pre>';
                
                try {
                    // 尝试解析为JSON
                    if (text.trim() && !endpoint.skipContent) {
                        const json = JSON.parse(text);
                        formattedContent = `<pre class="bg-dark text-light p-2">${JSON.stringify(json, null, 2)}</pre>`;
                    } else if (text.trim() && !endpoint.skipContent) {
                        formattedContent = `<pre class="bg-dark text-light p-2">${text}</pre>`;
                    }
                } catch (e) {
                    // 如果不是JSON，则显示原始文本
                    if (text.trim() && !endpoint.skipContent) {
                        formattedContent = `<pre class="bg-dark text-light p-2">${text}</pre>`;
                    }
                }
                
                // 获取响应头
                const headers = Array.from(response.headers.entries())
                    .map(([key, value]) => `<tr><td><strong>${key}</strong></td><td>${value}</td></tr>`)
                    .join('');
                
                detailsContainer.innerHTML = `
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">端点详情: ${endpoint.url}</h5>
                            <span class="badge ${response.ok ? 'bg-success' : 'bg-danger'}">
                                ${response.status} ${response.statusText}
                            </span>
                        </div>
                        <div class="card-body">
                            <p><strong>请求方法:</strong> ${endpoint.method}</p>
                            <p><strong>响应时间:</strong> ${responseTime} ms</p>
                            
                            <h6>响应头:</h6>
                            <div class="table-responsive" style="max-height: 200px; overflow-y: auto;">
                                <table class="table table-sm table-striped">
                                    <tbody>
                                        ${headers}
                                    </tbody>
                                </table>
                            </div>
                            
                            ${!endpoint.skipContent ? `
                                <h6 class="mt-3">响应内容:</h6>
                                <div style="max-height: 300px; overflow-y: auto;">
                                    ${formattedContent}
                                </div>
                            ` : '<p>响应内容已跳过</p>'}
                        </div>
                    </div>
                `;
            });
        }
    </script>

    <!-- 添加页面函数 -->
    <script>
        /**
         * 设置选择器值
         * @param {string} selectorType - 选择器类型（item, title, link等）
         * @param {string} selectorValue - 选择器值
         */
        function setSelector(selectorType, selectorValue) {
            if (!selectorType || !selectorValue) return;
            
            // 查找对应的选择器输入框
            const inputId = `selector${selectorType.charAt(0).toUpperCase() + selectorType.slice(1)}`;
            const inputElement = document.getElementById(inputId);
            
            if (inputElement) {
                inputElement.value = selectorValue;
                inputElement.classList.add('is-valid');
                
                // 提示用户已设置选择器
                const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                document.getElementById('toastMessage').textContent = `已设置${selectorType}选择器: ${selectorValue}`;
                toast.show();
                
                // 关闭模态框
                if (bootstrap.Modal.getInstance(document.getElementById('resultModal'))) {
                    bootstrap.Modal.getInstance(document.getElementById('resultModal')).hide();
                }
            }
        }
        
        /**
         * 处理认证错误，显示认证模态框
         * @param {Error} error - 错误对象
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.detail || '登录失败');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    // 保存令牌
                    localStorage.setItem('auth_token', data.access_token);
                    
                    // 显示成功消息
                    const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                    document.getElementById('toastMessage').textContent = '登录成功！';
                    toast.show();
                    
                    // 关闭模态框
                    bootstrap.Modal.getInstance(document.getElementById('authModal')).hide();
                    
                    // 如果有回调函数，则执行
                    if (window.authCallback && typeof window.authCallback === 'function') {
                        window.authCallback();
                        window.authCallback = null;
                    }
                })
                .catch(error => {
                    alert('登录失败: ' + error.message);
                });
            });
            
            // API密钥表单提交
            document.getElementById('apiKeyForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const apiKey = document.getElementById('apiKey').value;
                
                // 保存API密钥
                localStorage.setItem('api_key', apiKey);
                
                // 显示成功消息
                const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
                document.getElementById('toastMessage').textContent = 'API密钥已保存！';
                toast.show();
                </div>
